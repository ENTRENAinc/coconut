// Generated by CoffeeScript 1.3.1
var Case,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Case = (function() {

  Case.name = 'Case';

  function Case(options) {
    this.fetchResults = __bind(this.fetchResults, this);

    this.resultsAsArray = __bind(this.resultsAsArray, this);

    this.daysFromNotificationToCompletion = __bind(this.daysFromNotificationToCompletion, this);

    this.complete = __bind(this.complete, this);

    this.questionStatus = __bind(this.questionStatus, this);

    this.toJSON = __bind(this.toJSON, this);
    this.caseID = options != null ? options.caseID : void 0;
    if (options != null ? options.results : void 0) {
      this.loadFromResultArray(options.results);
    }
  }

  Case.prototype.loadFromResultArray = function(results) {
    var _this = this;
    this.caseResults = results;
    this.questions = [];
    this["Household Members"] = [];
    this.caseID = results[0].get("MalariaCaseID");
    return _.each(results, function(result) {
      if (_this.caseID === !result.get("MalariaCaseID")) {
        throw new Exception("Inconsistent Case ID");
      }
      _this.questions.push(result.get("question"));
      if (result.get("question") === "Household Members") {
        return _this["Household Members"].push(result.toJSON());
      } else {
        return _this[result.get("question")] = result.toJSON();
      }
    });
  };

  Case.prototype.fetch = function(options) {
    var _this = this;
    return $.couch.db(Coconut.config.database_name()).view("zanzibar/cases", {
      key: this.caseID,
      include_docs: true,
      success: function(result) {
        _this.questions = [];
        _this["Household Members"] = [];
        _.each(result.rows, function(row) {
          if (row.doc.question) {
            _this.questions.push(row.doc.question);
            if (row.doc.question === "Household Members") {
              return _this["Household Members"].push(row.doc);
            } else {
              if (_this[row.doc.question] != null) {
                console.error("" + _this.caseID + " already has a result for " + row.doc.question + " - needs cleaning");
              }
              return _this[row.doc.question] = row.doc;
            }
          } else {
            _this.questions.push("USSD Notification");
            return _this["USSD Notification"] = row.doc;
          }
        });
        return options != null ? options.success() : void 0;
      },
      error: function() {
        return options != null ? options.error() : void 0;
      }
    });
  };

  Case.prototype.toJSON = function() {
    var returnVal,
      _this = this;
    returnVal = {};
    _.each(this.questions, function(question) {
      return returnVal[question] = _this[question];
    });
    return returnVal;
  };

  Case.prototype.deIdentify = function(result) {};

  Case.prototype.flatten = function() {
    var returnVal;
    returnVal = {};
    _.each(this.toJSON(), function(object, type) {
      return _.each(object, function(value, field) {
        if (_.isObject(value)) {
          return _.each(value, function(arrayValue, arrayField) {
            return returnVal["" + type + "-" + field + ": " + arrayField] = arrayValue;
          });
        } else {
          return returnVal["" + type + ":" + field] = value;
        }
      });
    });
    return returnVal;
  };

  Case.prototype.LastModifiedAt = function() {
    return _.chain(this.toJSON()).map(function(question) {
      return question.lastModifiedAt;
    }).max(function(lastModifiedAt) {
      return lastModifiedAt != null ? lastModifiedAt.replace(/[- :]/g, "") : void 0;
    }).value();
  };

  Case.prototype.Questions = function() {
    return _.keys(this.toJSON()).join(", ");
  };

  Case.prototype.MalariaCaseID = function() {
    return this.caseID;
  };

  Case.prototype.possibleQuestions = function() {
    return ["Case Notification", "Facility", "Household", "Household Members"];
  };

  Case.prototype.questionStatus = function() {
    var result,
      _this = this;
    result = {};
    _.each(this.possibleQuestions(), function(question) {
      var _ref;
      if (question === "Household Members") {
        result["Household Members"] = true;
        return _.each(_this["Household Members"] != null, function(member) {
          if (member.complete === "false") {
            return result["Household Members"] = false;
          }
        });
      } else {
        return result[question] = ((_ref = _this[question]) != null ? _ref.complete : void 0) === "true";
      }
    });
    return result;
  };

  Case.prototype.complete = function() {
    return this.questionStatus()["Household Members"] === true;
  };

  Case.prototype.daysFromNotificationToCompletion = function() {
    var completionTime, startTime;
    startTime = moment(this["Case Notification"].lastModifiedAt);
    completionTime = null;
    _.each(this["Household Members"], function(member) {
      if (moment(member.lastModifiedAt) > completionTime) {
        return completionTime = moment(member.lastModifiedAt);
      }
    });
    return completionTime.diff(startTime, "days");
  };

  Case.prototype.location = function(type) {
    var _ref;
    return WardHierarchy[type]((_ref = this.toJSON()["Case Notification"]) != null ? _ref["FacilityName"] : void 0);
  };

  Case.prototype.withinLocation = function(location) {
    return this.location(location.type) === location.name;
  };

  Case.prototype.hasAdditionalPositiveCasesAtHousehold = function() {
    return _.any(this["Household Members"], function(householdMember) {
      return householdMember.MalariaTestResult === "PF" || householdMember.MalariaTestResult === "Mixed";
    });
  };

  Case.prototype.indexCaseDiagnosisDate = function() {
    var _ref;
    if (((_ref = this["Facility"]) != null ? _ref.DateofPositiveResults : void 0) != null) {
      return this["Facility"].DateofPositiveResults;
    } else if (this["USSD Notification"] != null) {
      return this["USSD Notification"].date;
    }
  };

  Case.prototype.householdMembersDiagnosisDate = function() {
    var returnVal;
    returnVal = [];
    return _.each(this["Household Members"] != null, function(member) {
      if (member.MalariaTestResult === "PF" || member.MalariaTestResult === "Mixed") {
        return returnVal.push(member.lastModifiedAt);
      }
    });
  };

  Case.prototype.resultsAsArray = function() {
    var _this = this;
    return _.chain(this.possibleQuestions().map(function(question) {
      return _this[question];
    })).flatten().compact().value();
  };

  Case.prototype.fetchResults = function(options) {
    var count, results,
      _this = this;
    results = _.map(this.resultsAsArray(), function(result) {
      var returnVal;
      returnVal = new Result();
      returnVal.id = result._id;
      return returnVal;
    });
    count = 0;
    _.each(results, function(result) {
      return result.fetch({
        success: function() {
          count += 1;
          if (count >= results.length) {
            return options.success(results);
          }
        }
      });
    });
    return results;
  };

  Case.prototype.updateCaseID = function(newCaseID) {
    return this.fetchResults({
      success: function(results) {
        return _.each(results, function(result) {
          if (result.attributes.MalariaCaseID == null) {
            throw "No MalariaCaseID";
          }
          return result.save({
            MalariaCaseID: newCaseID
          });
        });
      }
    });
  };

  return Case;

})();
