// Generated by CoffeeScript 1.3.1
var Sync,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Sync = (function(_super) {

  __extends(Sync, _super);

  Sync.name = 'Sync';

  function Sync() {
    this.replicateApplicationDocs = __bind(this.replicateApplicationDocs, this);

    this.replicateDesignDoc = __bind(this.replicateDesignDoc, this);

    this.getFromCloud = __bind(this.getFromCloud, this);

    this.log = __bind(this.log, this);

    this.last_get_time = __bind(this.last_get_time, this);

    this.last_get = __bind(this.last_get, this);

    this.last_send_time = __bind(this.last_send_time, this);

    this.last_send = __bind(this.last_send, this);
    return Sync.__super__.constructor.apply(this, arguments);
  }

  Sync.prototype.initialize = function() {
    return this.set({
      _id: "SyncLog"
    });
  };

  Sync.prototype.url = "/sync";

  Sync.prototype.target = function() {
    return Coconut.config.cloud_url();
  };

  Sync.prototype.last_send = function() {
    var _ref;
    return (_ref = this.get("last_send_result")) != null ? _ref.history[0] : void 0;
  };

  Sync.prototype.last_send_time = function() {
    var result, _ref;
    result = (_ref = this.last_send) != null ? _ref.start_time : void 0;
    if (result) {
      return moment(result).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.last_get = function() {
    return this.get("last_get_log");
  };

  Sync.prototype.last_get_time = function() {
    var result;
    result = this.get("last_get_time");
    if (result) {
      return moment(this.get("last_get_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.sendToCloud = function(options) {
    var _this = this;
    return this.fetch({
      success: function() {
        $(".sync-sent-status").html("pending");
        return $.couch.replicate(Coconut.config.database_name(), Coconut.config.cloud_url_with_credentials(), {
          success: function(response) {
            _this.save({
              last_send_result: response
            });
            return options.success();
          },
          error: function() {
            return options.error();
          }
        });
      }
    });
  };

  Sync.prototype.log = function(message) {
    Coconut.debug(message);
    return $(".sync-get-status").html(message);
  };

  Sync.prototype.getFromCloud = function(options) {
    var _this = this;
    return this.fetch({
      success: function() {
        _this.log("Getting new case notifications...");
        return _this.getNewNotifications({
          success: function() {
            return $.couch.login({
              name: Coconut.config.get("local_couchdb_admin_username"),
              password: Coconut.config.get("local_couchdb_admin_password"),
              success: function() {
                _this.log("Updating design document...");
                return _this.replicateDesignDoc({
                  success: function() {
                    _this.log("Updating application documents...");
                    return _this.replicateApplicationDocs({
                      success: function() {
                        $.couch.logout();
                        _this.log("Finished");
                        _this.save({
                          last_get_time: new Date().getTime()
                        });
                        if (options != null) {
                          if (typeof options.success === "function") {
                            options.success();
                          }
                        }
                        return document.location.reload();
                      },
                      error: function(error) {
                        $.couch.logout();
                        return _this.log("Error updating application: " + (error.toJSON()));
                      }
                    });
                  },
                  error: function(error) {
                    $.couch.logout();
                    return _this.log("Error updating design document: " + (error.toJSON()));
                  }
                });
              },
              error: function(error) {
                return _this.log("Error logging in as local admin: " + (error.toJSON()));
              }
            });
          }
        });
      }
    });
  };

  Sync.prototype.getNewNotifications = function(options) {
    return $.couch.db(Coconut.config.database_name()).view("zanzibar/rawNotificationsConvertedToCaseNotifications", {
      descending: true,
      include_docs: true,
      limit: 1,
      success: function(result) {
        var healthFacilities, mostRecentNotification, url, _ref, _ref1;
        mostRecentNotification = (_ref = result.rows) != null ? (_ref1 = _ref[0]) != null ? _ref1.doc.date : void 0 : void 0;
        url = "" + (Coconut.config.cloud_url_with_credentials()) + "/_design/" + (Coconut.config.database_name()) + "/_view/notifications?&ascending=true&include_docs=true&skip=1";
        if (mostRecentNotification) {
          url += "&startkey=\"" + mostRecentNotification + "\"";
        }
        healthFacilities = WardHierarchy.allWards({
          district: Coconut.config.local.get("district")
        });
        return $.ajax({
          url: url,
          dataType: "jsonp",
          success: function(result) {
            _.each(result.rows, function(row) {
              var notification;
              notification = row.doc;
              if (_.include(healthFacilities, notification.hf)) {
                result = new Result({
                  question: "Case Notification",
                  MalariaCaseID: notification.caseid,
                  FacilityName: notification.hf,
                  Shehia: notification.shehia,
                  Name: notification.name
                });
                result.save();
                notification.hasCaseNotification = true;
                return $.couch.db(Coconut.config.database_name()).saveDoc(notification);
              }
            });
            return typeof options.success === "function" ? options.success() : void 0;
          }
        });
      }
    });
  };

  Sync.prototype.replicate = function(options) {
    return $.couch.login({
      name: Coconut.config.get("local_couchdb_admin_username"),
      password: Coconut.config.get("local_couchdb_admin_password"),
      success: function() {
        return $.couch.replicate(Coconut.config.cloud_url_with_credentials(), Coconut.config.database_name(), {
          success: function() {
            return options.success();
          },
          error: function() {
            return options.error();
          }
        }, options.replicationArguments);
      },
      error: function() {
        return console.log("Unable to login as local admin for replicating the design document (main application)");
      }
    });
  };

  Sync.prototype.replicateDesignDoc = function(options) {
    return this.replicate(_.extend(options, {
      replicationArguments: {
        doc_ids: ["_design/" + Backbone.couch_connector.config.ddoc_name]
      }
    }));
  };

  Sync.prototype.replicateApplicationDocs = function(options) {
    return this.replicate(_.extend(options, {
      replicationArguments: {
        filter: "" + Backbone.couch_connector.config.ddoc_name + "/docsForApplication"
      }
    }));
  };

  return Sync;

})(Backbone.Model);
