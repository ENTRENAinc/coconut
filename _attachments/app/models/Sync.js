// Generated by CoffeeScript 1.3.3
var Sync,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Sync = (function(_super) {

  __extends(Sync, _super);

  function Sync() {
    return Sync.__super__.constructor.apply(this, arguments);
  }

  Sync.prototype.initialize = function() {
    return this.set({
      _id: "SyncLog"
    });
  };

  Sync.prototype.url = "/sync";

  Sync.prototype.target = function() {
    return Coconut.config.cloud_url();
  };

  Sync.prototype.last = function(type) {
    var _ref;
    return (_ref = this.get("last_" + type + "_result")) != null ? _ref.history[0] : void 0;
  };

  Sync.prototype.last_time = function(type) {
    var result, _ref;
    result = (_ref = this.last(type)) != null ? _ref.start_time : void 0;
    if (result) {
      return moment(result).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.sendToCloud = function(options) {
    var _this = this;
    return this.fetch({
      success: function() {
        $(".sync-last-time-sent").html("pending");
        return $.couch.replicate(Coconut.config.database_name(), Coconut.config.cloud_url_with_credentials(), {
          success: function(response) {
            _this.save({
              last_send_result: response
            });
            return options.success();
          },
          error: function() {
            return options.error();
          }
        });
      }
    });
  };

  Sync.prototype.getFromCloud = function(options) {
    var _this = this;
    return this.fetch({
      success: function() {
        $(".sync-last-time-got").html("pending");
        $.couch.db(Coconut.config.database_name()).view("zanzibar/rawNotificationsConvertedToCaseNotifications", {
          descending: true,
          include_docs: true,
          limit: 1,
          success: function(result) {
            var healthFacilities, mostRecentNotification, url, _ref, _ref1;
            mostRecentNotification = (_ref = result.rows) != null ? (_ref1 = _ref[0]) != null ? _ref1.doc.date : void 0 : void 0;
            url = "" + (Coconut.config.cloud_url_with_credentials()) + "/_design/" + (Coconut.config.database_name()) + "/_view/notifications?&ascending=true&include_docs=true&skip=1";
            if (mostRecentNotification) {
              url += "&startkey=\"" + mostRecentNotification + "\"";
            }
            healthFacilities = WardHierarchy.allWards({
              district: User.currentUser.get("district")
            });
            return $.ajax({
              url: url,
              dataType: "jsonp",
              success: function(result) {
                _.each(result.rows, function(row) {
                  var notification;
                  notification = row.doc;
                  if (_.include(healthFacilities, notification.hf)) {
                    result = new Result({
                      question: "Case Notification",
                      MalariaCaseID: notification.caseid,
                      FacilityName: notification.hf,
                      createdAt: moment(new Date()).format(Coconut.config.get("date_format")),
                      lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
                    });
                    result.save();
                    notification.hasCaseNotification = true;
                    return $.couch.db(Coconut.config.database_name()).saveDoc(notification);
                  }
                });
                if (typeof options.success === "function") {
                  options.success();
                }
                $(".sync-last-time-got").html("");
                return Coconut.menuView.update();
              }
            });
          }
        });
        return $.couch.login({
          name: Coconut.config.get("local_couchdb_admin_username"),
          password: Coconut.config.get("local_couchdb_admin_password"),
          success: function() {
            return $.couch.replicate(Coconut.config.cloud_url_with_credentials(), Coconut.config.database_name(), {
              success: function() {
                _this.save({
                  last_send_result: response
                });
                return $.couch.logout();
              },
              error: function() {
                return $.couch.logout();
              }
            }, {
              filter: "" + Backbone.couch_connector.config.ddoc_name + "/docsForApplication"
            });
          },
          error: function() {
            return console.log("Unable to login as local admin for replicating the design document (main application)");
          }
        });
      }
    });
  };

  return Sync;

})(Backbone.Model);
