// Generated by CoffeeScript 1.3.1
var CleanView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

CleanView = (function(_super) {

  __extends(CleanView, _super);

  CleanView.name = 'CleanView';

  function CleanView() {
    this.render = __bind(this.render, this);
    return CleanView.__super__.constructor.apply(this, arguments);
  }

  CleanView.prototype.initialize = function() {
    return this.question = new Question();
  };

  CleanView.prototype.el = '#content';

  CleanView.prototype.render = function(args) {
    var rc,
      _this = this;
    this.args = args;
    if (this.args === "undo") {
      if (User.currentUser.username() !== "admin") {
        throw "Must be admin";
      }
      rc = new ResultCollection();
      rc.fetch({
        include_docs: true,
        success: function() {
          var changed_results;
          changed_results = rc.filter(function(result) {
            return (result.get("user") === "reports") && (result.get("question") === "Household Members");
          });
          return _.each(changed_results, function(result) {
            return $.couch.db("zanzibar").openDoc(result.id, {
              revs_info: true
            }, {
              success: function(doc) {
                console.log(doc.HeadofHouseholdName);
                return $.couch.db("zanzibar").openDoc(result.id, {
                  rev: doc._revs_info[1].rev
                }, {
                  success: function(previousDoc) {
                    var newDoc;
                    newDoc = previousDoc;
                    newDoc._rev = doc._rev;
                    return result.save(newDoc);
                  }
                });
              }
            });
          });
        }
      });
      return;
    }
    this.total = 0;
    this.$el.html("      <h1>The following data requires cleaning</h1>      <h2>Dates (<span id='total'></span>)</h2>      <a href='#clean/apply_dates'<button>Apply Recommended Date Fixes</button></a>      <div id='dates'>        <table>        </table>      </div>      <h2>CaseIDS (<span id='total'></span>)</h2>      <a href='#clean/apply_caseIDs'<button>Apply Recommended CaseID Fixes</button></a>      <div id='caseIDs'>        <table>          <thead>            <th>Current</th>            <th>Recommendation</th>          </thead>          <tbody>        </table>      </div>    ");
    this.resultCollection = new ResultCollection;
    return this.resultCollection.fetch({
      include_docs: true,
      success: function() {
        _this.searchForDates();
        return _this.searchForManualCaseIDs();
      }
    });
  };

  CleanView.prototype.searchForManualCaseIDs = function() {
    var _this = this;
    return this.resultCollection.each(function(result) {
      return _.each(_.keys(result.attributes), function(key) {
        var caseID, recommendedChange;
        if (key.match(/MalariaCaseID/i)) {
          caseID = result.get(key);
          if (caseID != null) {
            if (!caseID.match(/[A-Z][A-Z][A-Z]\d\d\d/)) {
              recommendedChange = caseID.replace(/[\ \.\-\/_]/, "");
              recommendedChange = recommendedChange.toUpperCase();
              if (recommendedChange.match(/[A-Z][A-Z][A-Z]\d\d\d/)) {
                if (_this.args === "apply_caseIDs") {
                  if (User.currentUser.username() !== "admin") {
                    throw "Must be admin";
                  }
                  result.save(key, recommendedChange);
                }
              } else {
                recommendedChange = "Fix manually";
              }
              return $("#caseIDs tbody").append("                <tr>                  <td>" + caseID + "</td>                  <td>" + recommendedChange + "</td>                </tr>              ");
            }
          }
        }
      });
    });
  };

  CleanView.prototype.searchForDates = function() {
    var _this = this;
    return this.resultCollection.each(function(result) {
      return _.each(_.keys(result.attributes), function(key) {
        var cleanedDate, date;
        if (key.match(/date/i)) {
          date = result.get(key);
          if (date != null) {
            _this.total++;
            cleanedDate = _this.cleanDate(date);
            if (cleanedDate[1] !== "No action recommended") {
              $("#dates table").append("                <tr>                  <td><a href='#show/case/" + (result.get("MalariaCaseID")) + "'>" + (result.get("MalariaCaseID")) + "</a></td>                  <td>" + key + "</td>                  <td>" + date + "</td>                  <td>" + cleanedDate[0] + "</td>                  <td>" + cleanedDate[1] + "</td>                </tr>              ");
              if (_this.args === "apply_dates" && cleanedDate[0]) {
                if (User.currentUser.username() !== "admin") {
                  throw "Must be admin";
                }
                return result.save(key, cleanedDate[0]);
              }
            }
          }
        }
      });
    });
  };

  CleanView.prototype.cleanDate = function(date) {
    var dateMatch, day, first, month, second, third, year;
    dateMatch = date.match(/^(\d+)([ -/])(\d+)([ -/])(\d+)$/);
    if (dateMatch) {
      first = dateMatch[1];
      second = dateMatch[3];
      third = dateMatch[5];
      if (second.match(/201\d/)) {
        return [null, "Invalid year"];
      }
      if (first.match(/201\d/)) {
        year = first;
        if (dateMatch[2] !== "-") {
          day = second;
          month = third;
          return [this.format(year, month, day), "Non dash separators, not generated by tablet, can assume yy,dd,mm"];
        } else {
          return [null, "No action recommended"];
        }
      } else if (third.match(/201\d/)) {
        day = first;
        month = second;
        year = third;
        return [this.format(year, month, day), "Year last, not generated by tablet, can assume dd,mm,yy"];
      } else {
        return [null, "Can't find a date"];
      }
    } else {
      return [null, "Can't find a date"];
    }
  };

  CleanView.prototype.format = function(year, month, day) {
    year = parseInt(year, 10);
    month = parseInt(month, 10);
    day = parseInt(day, 10);
    if (month < 10) {
      month = "0" + month;
    }
    if (day < 10) {
      day = "0" + day;
    }
    return "" + year + "-" + month + "-" + day;
  };

  return CleanView;

})(Backbone.View);
