// Generated by CoffeeScript 1.3.1
var ReportView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

ReportView = (function(_super) {

  __extends(ReportView, _super);

  ReportView.name = 'ReportView';

  function ReportView() {
    this.render = __bind(this.render, this);

    this.update = __bind(this.update, this);
    return ReportView.__super__.constructor.apply(this, arguments);
  }

  ReportView.prototype.initialize = function() {
    return $("html").append("      <link href='js-libraries/Leaflet/leaflet.css' type='text/css' rel='stylesheet' />      <script type='text/javascript' src='js-libraries/Leaflet/leaflet.js'></script>    ");
  };

  ReportView.prototype.el = '#content';

  ReportView.prototype.events = {
    "change #reportOptions": "update"
  };

  ReportView.prototype.update = function() {
    var reportOptions, url;
    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return "" + key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  ReportView.prototype.render = function(options) {
    var selectedLocations,
      _this = this;
    this.locationTypes = "region, district, constituan, ward".split(/, /);
    _.each(this.locationTypes, function(option) {
      return this[option] = unescape(options[option]) || "ALL";
    });
    this.reportType = options.reportType || "locations";
    this.startDate = options.startDate || moment(new Date).subtract('days', 30).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    this.$el.html("      <style>        table.results th.header, table.results td{          font-size:150%;        }      </style>      <table id='reportOptions'></table>      ");
    $("#reportOptions").append(this.formFilterTemplate({
      id: "start",
      label: "Start Date",
      form: "<input id='start' type='date' value='" + this.startDate + "'/>"
    }));
    $("#reportOptions").append(this.formFilterTemplate({
      id: "end",
      label: "End Date",
      form: "<input id='end' type='date' value='" + this.endDate + "'/>"
    }));
    selectedLocations = {};
    _.each(this.locationTypes, function(locationType) {
      return selectedLocations[locationType] = this[locationType];
    });
    _.each(this.locationTypes, function(locationType, index) {
      var locationSelectedOneLevelHigher;
      return $("#reportOptions").append(_this.formFilterTemplate({
        id: locationType,
        label: locationType.capitalize(),
        form: "          <select id='" + locationType + "'>            " + (locationSelectedOneLevelHigher = selectedLocations[_this.locationTypes[index - 1]], _.map(["ALL"].concat(_this.hierarchyOptions(locationType, locationSelectedOneLevelHigher)), function(hierarchyOption) {
          return "<option " + (hierarchyOption === selectedLocations[locationType] ? "selected='true'" : void 0) + ">" + hierarchyOption + "</option>";
        }).join("")) + "          </select>        "
      }));
    });
    $("#reportOptions").append(this.formFilterTemplate({
      id: "report-type",
      label: "Report Type",
      form: "      <select id='report-type'>        " + (_.map(["locations", "spreadsheet", "results"], function(type) {
        return "<option " + (type === _this.reportType ? "selected='true'" : void 0) + ">" + type + "</option>";
      }).join("")) + "      </select>      "
    }));
    this[this.reportType]();
    $('div[data-role=fieldcontain]').fieldcontain();
    $('select').selectmenu();
    return $('input[type=date]').datebox({
      mode: "calbox"
    });
  };

  ReportView.prototype.hierarchyOptions = function(locationType, location) {
    if (locationType === "region") {
      return _.keys(WardHierarchy.hierarchy);
    }
    return _.chain(WardHierarchy.hierarchy).map(function(value, key) {
      if (locationType === "district" && location === key) {
        return _.keys(value);
      }
      return _.map(value, function(value, key) {
        if (locationType === "constituan" && location === key) {
          return _.keys(value);
        }
        return _.map(value, function(value, key) {
          if (locationType === "ward" && location === key) {
            return _.keys(value);
          }
        });
      });
    }).flatten().compact().value();
  };

  ReportView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;
    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  ReportView.prototype.formFilterTemplate = function(options) {
    return "        <tr>          <td>            <label style='display:inline' for='" + options.id + "'>" + options.label + "</label>           </td>          <td style='width:150%'>            " + options.form + "            </select>          </td>        </tr>    ";
  };

  ReportView.prototype.viewQuery = function(options) {
    var _this = this;
    return $.couch.db(Coconut.config.database_name()).view("zanzibar/caseByLastModified", {
      descending: true,
      include_docs: true,
      startkey: moment(this.endDate).eod().format(Coconut.config.get("date_format")),
      endkey: this.startDate,
      success: function(result) {
        var cases, resultHash;
        resultHash = {};
        _.each(result.rows, function(caseResult) {
          if (!resultHash[caseResult.doc["MalariaCaseID"]]) {
            resultHash[caseResult.doc["MalariaCaseID"]] = [];
          }
          return resultHash[caseResult.doc["MalariaCaseID"]].push(new Result(caseResult.doc));
        });
        cases = _.chain(resultHash).map(function(results, caseID) {
          var malariaCase, mostSpecificLocationSelected;
          malariaCase = new Case({
            results: results
          });
          mostSpecificLocationSelected = _this.mostSpecificLocationSelected();
          if (mostSpecificLocationSelected.name === "ALL" || malariaCase.withinLocation(mostSpecificLocationSelected)) {
            return malariaCase;
          }
        }).compact().value();
        return options.success(cases);
      }
    });
  };

  ReportView.prototype.locations = function() {
    var _this = this;
    this.$el.append("      <div id='map' style='width:100%; height:600px;'></div>    ");
    return this.viewQuery({
      success: function(results) {
        var locations, map, _ref, _ref1;
        locations = _.compact(_.map(results, function(result) {
          if (result.doc["HouseholdLocation-latitude"]) {
            return {
              MalariaCaseID: result.doc["MalariaCaseID"],
              latitude: result.doc["HouseholdLocation-latitude"],
              longitude: result.doc["HouseholdLocation-longitude"]
            };
          }
        }));
        if (locations.length === 0) {
          $("#map").html("            <h2>No location information for the range specified.</h2>          ");
          return;
        }
        map = new L.Map('map', {
          center: new L.LatLng((_ref = locations[0]) != null ? _ref.latitude : void 0, (_ref1 = locations[0]) != null ? _ref1.longitude : void 0),
          zoom: 9
        });
        map.addLayer(new L.TileLayer('http://{s}.tile.cloudmade.com/4eb20961f7db4d93b9280e8df9b33d3f/997/256/{z}/{x}/{y}.png', {
          maxZoom: 18
        }));
        return _.each(locations, function(location) {
          return map.addLayer(new L.CircleMarker(new L.LatLng(location.latitude, location.longitude)));
        });
      }
    });
  };

  ReportView.prototype.spreadsheet = function() {
    var _this = this;
    return this.viewQuery({
      success: function(cases) {
        var allCasesFlattened, csv, csvData, csvHeaders, fields;
        fields = {};
        csv = {};
        allCasesFlattened = _.map(cases, function(malariaCase) {
          var malariaCaseFlattened;
          malariaCaseFlattened = malariaCase.flatten();
          _.each(_.keys(malariaCaseFlattened), function(field) {
            return fields[field] = true;
          });
          return malariaCaseFlattened;
        });
        csvHeaders = (_.keys(fields)).join(",");
        csvData = _.map(allCasesFlattened, function(malariaCaseFlattened) {
          return _.map(fields, function(value, key) {
            if (!csv[key]) {
              csv[key] = [];
            }
            csv[key].push(malariaCaseFlattened[key] || null);
            return malariaCaseFlattened[key] || null;
          }).join(",");
        }).join("\n");
        _this.$el.append("          <a id='csv' href='data:text/octet-stream;base64," + (Base64.encode(csvHeaders + "\n" + csvData)) + "' download='" + (_this.startDate + "-" + _this.endDate) + ".csv'>Download spreadsheet</a>        ");
        return $("a#csv").button();
      }
    });
  };

  ReportView.prototype.results = function() {
    var _this = this;
    this.$el.append("      <table id='results' class='tablesorter'>        <thead>          <tr>          </tr>        </thead>        <tbody>        </tbody>      </table>    ");
    return this.viewQuery({
      success: function(cases) {
        var fields, tableData;
        fields = "MalariaCaseID,LastModifiedAt,Questions".split(",");
        tableData = _.chain(cases).sortBy(function(caseResult) {
          return caseResult.LastModifiedAt();
        }).value().reverse().map(function(caseResult) {
          return _.map(fields, function(field) {
            return caseResult[field]();
          });
        });
        $("table#results thead tr").append("          " + (_.map(fields, function(field) {
          return "<th>" + field + "</th>";
        }).join("")) + "        ");
        return $("table#results tbody").append(_.map(tableData, function(row) {
          return "          <tr>            " + (_.map(row, function(element, index) {
            return "              <td>" + (index === 0 ? "<a href='#show/case/" + element + "'>" + element + "</a>" : element) + "</td>            ";
          }).join("")) + "          </tr>        ";
        }).join(""));
      }
    });
  };

  return ReportView;

})(Backbone.View);
