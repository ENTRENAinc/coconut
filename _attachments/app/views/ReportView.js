// Generated by CoffeeScript 1.3.3
var ReportView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportView = (function(_super) {

  __extends(ReportView, _super);

  function ReportView() {
    this.render = __bind(this.render, this);

    this.update = __bind(this.update, this);
    return ReportView.__super__.constructor.apply(this, arguments);
  }

  ReportView.prototype.initialize = function() {
    return $("html").append("      <style>        .cases{          display: none;        }      </style>    ");
  };

  ReportView.prototype.el = '#content';

  ReportView.prototype.events = {
    "change #reportOptions": "update",
    "change #summaryField1": "summarySelectorChanged",
    "change #summaryField2": "summarySelector2Changed",
    "change #cluster": "update",
    "click .toggleDisaggregation": "toggleDisaggregation"
  };

  ReportView.prototype.hideSublocations = function() {
    var hide;
    hide = false;
    return _.each(this.locationTypes, function(location) {
      if (hide) {
        $("#row-" + location).hide();
      }
      if ($("#" + location).val() === "ALL") {
        return hide = true;
      }
    });
  };

  ReportView.prototype.update = function() {
    var reportOptions, url;
    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text(),
      cluster: $("#cluster").val(),
      summaryField1: $("#summaryField1").val()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return "" + key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  ReportView.prototype.render = function(options) {
    var selectedLocations,
      _this = this;
    this.locationTypes = "region, district, constituan, shehia".split(/, /);
    _.each(this.locationTypes, function(option) {
      if (options[option] === void 0) {
        return this[option] = "ALL";
      } else {
        return this[option] = unescape(options[option]);
      }
    });
    this.reportType = options.reportType || "dashboard";
    this.startDate = options.startDate || moment(new Date).subtract('days', 7).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    this.cluster = options.cluster || "off";
    this.summaryField1 = options.summaryField1;
    this.$el.html("      <style>        table.results th.header, table.results td{          font-size:150%;        }        .malaria-positive{          background-color: pink;        }      </style>      <table id='reportOptions'></table>      <div id='reportContents'></div>      ");
    $("#reportOptions").append(this.formFilterTemplate({
      id: "start",
      label: "Start Date",
      form: "<input id='start' class='date' type='text' value='" + this.startDate + "'/>"
    }));
    $("#reportOptions").append(this.formFilterTemplate({
      id: "end",
      label: "End Date",
      form: "<input id='end' class='date' type='text' value='" + this.endDate + "'/>"
    }));
    selectedLocations = {};
    _.each(this.locationTypes, function(locationType) {
      return selectedLocations[locationType] = this[locationType];
    });
    _.each(this.locationTypes, function(locationType, index) {
      var locationSelectedOneLevelHigher;
      return $("#reportOptions").append(_this.formFilterTemplate({
        type: "location",
        id: locationType,
        label: locationType.capitalize(),
        form: "          <select data-role='selector' id='" + locationType + "'>            " + (locationSelectedOneLevelHigher = selectedLocations[_this.locationTypes[index - 1]], _.map(["ALL"].concat(_this.hierarchyOptions(locationType, locationSelectedOneLevelHigher)), function(hierarchyOption) {
          return "<option " + (hierarchyOption === selectedLocations[locationType] ? "selected='true'" : void 0) + ">" + hierarchyOption + "</option>";
        }).join("")) + "          </select>        "
      }));
    });
    this.hideSublocations();
    $("#reportOptions").append(this.formFilterTemplate({
      id: "report-type",
      label: "Report Type",
      form: "      <select data-role='selector' id='report-type'>        " + (_.map(["dashboard", "locations", "spreadsheet", "summarytables"], function(type) {
        return "<option " + (type === _this.reportType ? "selected='true'" : void 0) + ">" + type + "</option>";
      }).join("")) + "      </select>      "
    }));
    this[this.reportType]();
    $('div[data-role=fieldcontain]').fieldcontain();
    $('select[data-role=selector]').selectmenu();
    return $('input.date').datebox({
      mode: "calbox",
      dateFormat: "%Y-%m-%d"
    });
  };

  ReportView.prototype.hierarchyOptions = function(locationType, location) {
    if (locationType === "region") {
      return _.keys(WardHierarchy.hierarchy);
    }
    return _.chain(WardHierarchy.hierarchy).map(function(value, key) {
      if (locationType === "district" && location === key) {
        return _.keys(value);
      }
      return _.map(value, function(value, key) {
        if (locationType === "constituan" && location === key) {
          return _.keys(value);
        }
        return _.map(value, function(value, key) {
          if (locationType === "shehia" && location === key) {
            return value;
          }
        });
      });
    }).flatten().compact().value();
  };

  ReportView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;
    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  ReportView.prototype.formFilterTemplate = function(options) {
    return "        <tr id='row-" + options.id + "' class='" + options.type + "'>          <td>            <label style='display:inline' for='" + options.id + "'>" + options.label + "</label>           </td>          <td style='width:150%'>            " + options.form + "          </td>        </tr>    ";
  };

  ReportView.prototype.getCases = function(options) {
    var _this = this;
    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/caseIDsByDate", {
      startkey: moment(this.endDate).eod().format(Coconut.config.get("date_format")),
      endkey: this.startDate,
      descending: true,
      include_docs: false,
      success: function(result) {
        var afterAllCasesDownloaded, caseIDs, cases;
        caseIDs = _.unique(_.pluck(result.rows, "value"));
        cases = _.map(caseIDs, function(caseID) {
          var malariaCase;
          malariaCase = new Case({
            caseID: caseID
          });
          malariaCase.fetch({
            success: function() {
              return afterAllCasesDownloaded();
            }
          });
          return malariaCase;
        });
        return afterAllCasesDownloaded = _.after(caseIDs.length, function() {
          cases = _.chain(cases).map(function(malariaCase) {
            var mostSpecificLocationSelected;
            mostSpecificLocationSelected = _this.mostSpecificLocationSelected();
            if (mostSpecificLocationSelected.name === "ALL" || malariaCase.withinLocation(mostSpecificLocationSelected)) {
              return malariaCase;
            }
          }).compact().value();
          return options.success(cases);
        });
      }
    });
  };

  ReportView.prototype.locations = function() {
    var _this = this;
    $("#reportOptions").append(this.formFilterTemplate({
      id: "cluster",
      label: "Cluster",
      form: "        <select name='cluster' id='cluster' data-role='slider'>          <option value='off'>Off</option>          <option value='on' " + (this.cluster === "on" ? "selected='true'" : '') + "'>On</option>        </select>       "
    }));
    $("#reportContents").html("      Use + - buttons to zoom map. Click and drag to reposition the map. Circles with a darker have multiple cases. Red cases show households with additional positive malaria cases.<br/>      <div id='map' style='width:100%; height:600px;'></div>    ");
    $("#cluster").slider();
    return this.getCases({
      success: function(results) {
        var bing, clusterGroup, latitudeSum, locations, longitudeSum, map, osm;
        locations = _.compact(_.map(results, function(caseResult) {
          var _ref, _ref1, _ref2, _ref3;
          if ((_ref = caseResult.Household) != null ? _ref["HouseholdLocation-latitude"] : void 0) {
            return {
              MalariaCaseID: caseResult.caseID,
              latitude: (_ref1 = caseResult.Household) != null ? _ref1["HouseholdLocation-latitude"] : void 0,
              longitude: (_ref2 = caseResult.Household) != null ? _ref2["HouseholdLocation-longitude"] : void 0,
              hasAdditionalPositiveCasesAtHousehold: caseResult.hasAdditionalPositiveCasesAtHousehold(),
              date: (_ref3 = caseResult.Household) != null ? _ref3.lastModifiedAt : void 0
            };
          }
        }));
        if (locations.length === 0) {
          $("#map").html("            <h2>No location information for the range specified.</h2>          ");
          return;
        }
        latitudeSum = _.reduce(locations, function(memo, location) {
          return memo + Number(location.latitude);
        }, 0);
        longitudeSum = _.reduce(locations, function(memo, location) {
          return memo + Number(location.longitude);
        }, 0);
        map = new L.Map('map', {
          center: new L.LatLng(latitudeSum / locations.length, longitudeSum / locations.length),
          zoom: 9
        });
        osm = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        bing = new L.BingLayer("Anqm0F_JjIZvT0P3abS6KONpaBaKuTnITRrnYuiJCE0WOhH6ZbE4DzeT6brvKVR5");
        map.addLayer(bing);
        map.addControl(new L.Control.Layers({
          'OSM': osm,
          "Bing": bing
        }, {}));
        L.Icon.Default.imagePath = 'js-libraries/Leaflet/images';
        if (_this.cluster === "on") {
          clusterGroup = new L.MarkerClusterGroup();
          _.each(locations, function(location) {
            return L.marker([location.latitude, location.longitude]).addTo(clusterGroup).bindPopup("" + location.date + ": <a href='#show/case/" + location.MalariaCaseID + "'>" + location.MalariaCaseID + "</a>");
          });
          return map.addLayer(clusterGroup);
        } else {
          return _.each(locations, function(location) {
            return L.circleMarker([location.latitude, location.longitude], {
              "fillColor": location.hasAdditionalPositiveCasesAtHousehold ? "red" : ""
            }).addTo(map).bindPopup("                 " + location.date + ": <a href='#show/case/" + location.MalariaCaseID + "'>" + location.MalariaCaseID + "</a>               ");
          });
        }
      }
    });
  };

  ReportView.prototype.spreadsheet = function() {
    var _this = this;
    return this.getCases({
      success: function(cases) {
        var allCasesFlattened, csv, csvData, csvHeaders, fields;
        fields = {};
        csv = {};
        allCasesFlattened = _.map(cases, function(malariaCase) {
          var malariaCaseFlattened;
          malariaCaseFlattened = malariaCase.flatten();
          _.each(_.keys(malariaCaseFlattened), function(field) {
            return fields[field] = true;
          });
          return malariaCaseFlattened;
        });
        csvHeaders = (_.keys(fields)).join(",");
        csvData = _.map(allCasesFlattened, function(malariaCaseFlattened) {
          return _.map(fields, function(value, key) {
            if (!csv[key]) {
              csv[key] = [];
            }
            csv[key].push(malariaCaseFlattened[key] || null);
            return malariaCaseFlattened[key] || null;
          }).join(",");
        }).join("\n");
        $("#reportContents").html("          <a id='csv' href='data:text/octet-stream;base64," + (Base64.encode(csvHeaders + "\n" + csvData)) + "' download='" + (_this.startDate + "-" + _this.endDate) + ".csv'>Download spreadsheet</a>        ");
        return $("a#csv").button();
      }
    });
  };

  ReportView.prototype.results = function() {
    var _this = this;
    $("#reportContents").html("      <table id='results' class='tablesorter'>        <thead>          <tr>          </tr>        </thead>        <tbody>        </tbody>      </table>    ");
    return this.getCases({
      success: function(cases) {
        var fields, tableData;
        fields = "MalariaCaseID,LastModifiedAt,Questions".split(",");
        tableData = _.chain(cases).sortBy(function(caseResult) {
          return caseResult.LastModifiedAt();
        }).value().reverse().map(function(caseResult) {
          return _.map(fields, function(field) {
            return caseResult[field]();
          });
        });
        $("table#results thead tr").append("          " + (_.map(fields, function(field) {
          return "<th>" + field + "</th>";
        }).join("")) + "        ");
        return $("table#results tbody").append(_.map(tableData, function(row) {
          return "          <tr>            " + (_.map(row, function(element, index) {
            return "              <td>" + (index === 0 ? "<a href='#show/case/" + element + "'>" + element + "</a>" : element) + "</td>            ";
          }).join("")) + "          </tr>        ";
        }).join(""));
      }
    });
  };

  ReportView.prototype.getFieldListSelector = function(resultCollection, selectorId) {
    var fields;
    fields = _.chain(resultCollection.toJSON()).map(function(result) {
      return _.keys(result);
    }).flatten().uniq().sort().value();
    fields = _.without(fields, "_id", "_rev");
    return "          <br/>          Choose a field to summarize:<br/>          <select data-role='selector' class='summarySelector' id='" + selectorId + "'>            <option></option>            " + (_.map(fields, function(field) {
      return "<option id='" + field + "'>" + field + "</option>";
    }).join("")) + "          </select>        ";
  };

  ReportView.prototype.summarytables = function() {
    var _this = this;
    return Coconut.resultCollection.fetch({
      include_docs: true,
      success: function() {
        $("#reportContents").html(_this.getFieldListSelector(Coconut.resultCollection, "summaryField1"));
        $('#summaryField1').selectmenu();
        if (_this.summaryField1 != null) {
          $('#summaryField1').val(_this.summaryField1);
          $('#summaryField1').selectmenu("refresh");
          return _this.summarize(_this.summaryField1);
        }
      }
    });
  };

  ReportView.prototype.summarySelectorChanged = function(event) {
    this.summarize($(event.target).find("option:selected").text());
    return this.update();
  };

  ReportView.prototype.summarize = function(field) {
    var _this = this;
    return this.getCases({
      success: function(cases) {
        var results;
        results = {};
        _.each(cases, function(caseData) {
          return _.each(caseData.toJSON(), function(value, key) {
            var valuesToCheck;
            valuesToCheck = [];
            if (key === "Household Members") {
              valuesToCheck = value;
            } else {
              valuesToCheck.push(value);
            }
            return _.each(valuesToCheck, function(value, key) {
              if (value[field] != null) {
                if (results[value[field]] == null) {
                  results[value[field]] = {};
                  results[value[field]]["sums"] = 0;
                  results[value[field]]["resultData"] = [];
                }
                results[value[field]]["sums"] += 1;
                return results[value[field]]["resultData"].push({
                  caseID: caseData.caseID,
                  resultID: value._id
                });
              }
            });
          });
        });
        if ($("#summaryTables").length !== 1) {
          _this.$el.append("<div id='summaryTables'></div>");
        }
        $("#summaryTables").html("          <h2>" + field + "</h2>          <table id='summaryTable' class='tablesorter'>            <thead>              <tr>                <th>Value</th>                <th>Total</th>                <th class='cases'>Cases</th>              </tr>            </thead>            <tbody>              " + (_.map(results, function(aggregates, value) {
          return "                  <tr data-row-value='" + value + "'>                    <td>" + value + "</td>                    <td>                      <button class='toggleDisaggregation'>" + aggregates["sums"] + "</button>                    </td>                    <td class='cases'>                      " + (_.map(aggregates.resultData, function(resultData) {
            return "<a data-result-id='" + resultData.resultID + "' data-case-id='" + resultData.caseID + "' data-row-value='" + value + "' class='case' href='#show/case/" + resultData.caseID + "/" + resultData.resultID + "'>" + resultData.caseID + "</a>";
          }).join("")) + "                    </td>                  </tr>                  ";
        }).join("")) + "            </tbody>          </table>          <h3>          Disaggregate summary based on another variable          </h3>        ");
        $("#summaryTables").append($("#summaryField1").clone().attr("id", "summaryField2"));
        $("#summaryField2").selectmenu();
        $("button").button();
        $("a").button();
        return _.each($('table tr'), function(row, index) {
          if (index % 2 === 1) {
            return $(row).addClass("odd");
          }
        });
      }
    });
  };

  ReportView.prototype.toggleDisaggregation = function(event) {
    return $(event.target).parents("td").siblings(".cases").toggle();
  };

  ReportView.prototype.summarySelector2Changed = function(event) {
    return this.disaggregateSummary($(event.target).find("option:selected").text());
  };

  ReportView.prototype.disaggregateSummary = function(field) {
    var afterLookups, cases, data, disaggregatedSummaryTable;
    data = {};
    disaggregatedSummaryTable = $("#summaryTable").clone().attr("id", "disaggregatedSummaryTable");
    cases = disaggregatedSummaryTable.find("a.case");
    _.each(cases, function(caseElement) {
      var result, resultID, rowValue;
      caseElement = $(caseElement);
      rowValue = caseElement.attr("data-row-value");
      if (!data[rowValue]) {
        data[rowValue] = {};
      }
      resultID = caseElement.attr("data-result-id");
      result = new Result({
        _id: resultID
      });
      return result.fetch({
        success: function() {
          var caseData, caseID, fieldValue;
          fieldValue = result.get(field);
          if (fieldValue != null) {
            if (!data[rowValue][fieldValue]) {
              data[rowValue][fieldValue] = 0;
            }
            data[rowValue][fieldValue] += 1;
            return afterLookups();
          } else {
            caseID = caseElement.attr("data-case-id");
            caseData = new Case({
              caseID: caseID
            });
            return caseData.fetch({
              success: function() {
                fieldValue = caseData.flatten()[field];
                if (!data[rowValue][fieldValue]) {
                  data[rowValue][fieldValue] = 0;
                }
                data[rowValue][fieldValue] += 1;
                return afterLookups();
              }
            });
          }
        }
      });
    });
    return afterLookups = _.after(cases.length, function() {
      var columns;
      console.log(data);
      columns = _.uniq(_.flatten(_.map(data, function(row) {
        return _.keys(row);
      })).sort());
      console.log(columns);
      disaggregatedSummaryTable.find("thead tr").append(_.map(columns, function(column) {
        return "<th>" + column + "</th>";
      }).join(""));
      _.each(data, function(value, rowValue) {
        var row;
        row = disaggregatedSummaryTable.find("tbody tr[data-row-value='" + rowValue + "']");
        return _.each(columns, function(column) {
          if (value[column]) {
            return row.append("<td>" + value[column] + "</td>");
          } else {
            return row.append("<td>0</td>");
          }
        });
      });
      return $("#summaryTables").append(disaggregatedSummaryTable);
    });
  };

  ReportView.prototype.dashboard = function() {
    var tableColumns,
      _this = this;
    $("tr.location").hide();
    $("#reportContents").html("      <!--      Reported/Facility Followup/Household Followup/#Tested/ (Show for Same period last year)      For completed cases, average time between notification and household followup      Last seven days      Last 30 days      Last 365 days      Current month      Current year      Total      -->      <h2>Alerts</h2>      <div id='alerts'></div>      <h1>        Cases      </h2>      For the selected period:<br/>      <table>        <tr>          <td>Cases Reported at Facility</td>          <td id='Cases-Reported-at-Facility'></td>        </tr>        <tr>          <td>Additional People Tested</td>          <td id='Additional-People-Tested'></td>        </tr>        <tr>          <td>Additional People Tested Positive</td>          <td id='Additional-People-Tested-Positive'></td>        </tr>      </table>      <br/>      Click on a button for more details about the case. Pink buttons are for <span style='background-color:pink'> positive malaria results.</span>      <table class='summary tablesorter'>        <thead><tr>        </tr></thead>        <tbody>        </tbody>      </table>      <style>        table a, table a:link, table a:visited {color: blue; font-size: 150%}      </style>    ");
    tableColumns = ["Case ID", "Diagnosis Date", "Health Facility District", "USSD Notification"];
    Coconut.questions.fetch({
      success: function() {
        tableColumns = tableColumns.concat(Coconut.questions.map(function(question) {
          return question.label();
        }));
        return _.each(tableColumns, function(text) {
          return $("table.summary thead tr").append("<th>" + text + " (<span id='th-" + (text.replace(/\s/, "")) + "-count'></span>)</th>");
        });
      }
    });
    return this.getCases({
      success: function(cases) {
        var afterRowsAreInserted;
        _.each(cases, function(malariaCase) {
          return malariaCase.fetch({
            success: function() {
              $("table.summary tbody").append("                <tr id='case-" + malariaCase.caseID + "'>                  <td class='CaseID'>                    <a href='#show/case/" + malariaCase.caseID + "'><button>" + malariaCase.caseID + "</button></a>                  </td>                  <td class='IndexCaseDiagnosisDate'>                    " + (malariaCase.indexCaseDiagnosisDate()) + "                  </td>                  <td class='HealthFacilityDistrict'>                    " + (malariaCase["USSD Notification"] != null ? FacilityHierarchy.getDistrict(malariaCase["USSD Notification"].hf) : "") + "                  </td>                  <td class='USSDNotification'>                    " + (_this.createDashboardLinkForResult(malariaCase, "USSD Notification", "<img src='images/ussd.png'/>")) + "                  </td>                  <td class='CaseNotification'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Case Notification", "<img src='images/caseNotification.png'/>")) + "                  </td>                  <td class='Facility'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Facility", "<img src='images/facility.png'/>")) + "                  </td>                  <td class='Household'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Household", "<img src='images/household.png'/>")) + "                  </td>                  <td class='HouseholdMembers'>                    " + (_.map(malariaCase["Household Members"], function(householdMember) {
                var buttonText;
                buttonText = "<img src='images/householdMember.png'/>";
                if (householdMember.complete == null) {
                  if (!householdMember.complete) {
                    buttonText = buttonText.replace(".png", "Incomplete.png");
                  }
                }
                return _this.createDashboardLink({
                  caseID: malariaCase.caseID,
                  docId: householdMember._id,
                  buttonClass: (householdMember.MalariaTestResult != null) && (householdMember.MalariaTestResult === "PF" || householdMember.MalariaTestResult === "Mixed") ? "malaria-positive" : "",
                  buttonText: buttonText
                });
              }).join("")) + "                  </td>                </tr>              ");
              return afterRowsAreInserted();
            }
          });
        });
        return afterRowsAreInserted = _.after(cases.length, function() {
          var districtsWithFollowup;
          _.each(tableColumns, function(text) {
            var columnId;
            columnId = text.replace(/\s/, "");
            return $("#th-" + columnId + "-count").html($("td." + columnId + " button").length);
          });
          $("#Cases-Reported-at-Facility").html($("td.CaseID button").length);
          $("#Additional-People-Tested").html($("td.HouseholdMembers button").length);
          $("#Additional-People-Tested-Positive").html($("td.HouseholdMembers button.malaria-positive").length);
          $("table.summary").tablesorter({
            widgets: ['zebra'],
            sortList: [[1, 1]]
          });
          districtsWithFollowup = {};
          _.each($("table.summary tr"), function(row) {
            row = $(row);
            if (row.find("td.USSDNotification button").length > 0) {
              if (row.find("td.CaseNotification button").length === 0) {
                if (moment().diff(row.find("td.IndexCaseDiagnosisDate").html(), "days") > 2) {
                  if (districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] == null) {
                    districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] = 0;
                  }
                  return districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] += 1;
                }
              }
            }
          });
          return $("#alerts").append("          <style>            #alerts,table.alerts{              font-size: 80%             }          </style>          The following districts have USSD Notifications that have not been followed up after two days. Recommendation call the DMSO:            <table class='alerts'>              <thead>                <tr>                  <th>District</th><th>Number of cases</th>                </tr>              </thead>              <tbody>                " + (_.map(districtsWithFollowup, function(numberOfCases, district) {
            return "                    <tr>                      <td>" + district + "</td>                      <td>" + numberOfCases + "</td>                    </tr>                  ";
          }).join("")) + "              </tbody>            </table>          ");
        });
      }
    });
  };

  ReportView.prototype.createDashboardLinkForResult = function(malariaCase, resultType, buttonText) {
    if (buttonText == null) {
      buttonText = "";
    }
    if (malariaCase[resultType] != null) {
      if (malariaCase[resultType].complete == null) {
        if (!malariaCase[resultType].complete) {
          if (resultType !== "USSD Notification") {
            buttonText = buttonText.replace(".png", "Incomplete.png");
          }
        }
      }
      return this.createDashboardLink({
        caseID: malariaCase.caseID,
        docId: malariaCase[resultType]._id,
        buttonText: buttonText
      });
    } else {
      return "";
    }
  };

  ReportView.prototype.createDashboardLink = function(options) {
    return "<a href='#show/case/" + options.caseID + "/" + options.docId + "'><button class='" + options.buttonClass + "'>" + options.buttonText + "</button></a>";
  };

  return ReportView;

})(Backbone.View);
