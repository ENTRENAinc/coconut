// Generated by CoffeeScript 1.6.2
var ReportView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportView = (function(_super) {
  __extends(ReportView, _super);

  function ReportView() {
    this.render = __bind(this.render, this);
    this.update = __bind(this.update, this);    _ref = ReportView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ReportView.prototype.initialize = function() {
    return $("html").append("      <style>        .cases{          display: none;        }      </style>    ");
  };

  ReportView.prototype.el = '#content';

  ReportView.prototype.events = {
    "change #reportOptions": "update",
    "change #summaryField1": "summarySelectorChanged",
    "change #summaryField2": "summarySelector2Changed",
    "change #cluster": "update",
    "click .toggleDisaggregation": "toggleDisaggregation",
    "click .same-cell-disaggregatable": "toggleDisaggregationSameCell",
    "click .toggle-trend-data": "toggleTrendData"
  };

  ReportView.prototype.toggleTrendData = function() {
    if ($(".toggle-trend-data").html() === "Show trend data") {
      $(".data").show();
      return $(".toggle-trend-data").html("Hide trend data");
    } else {
      $(".data").hide();
      $(".period-0.data").show();
      return $(".toggle-trend-data").html("Show trend data");
    }
  };

  ReportView.prototype.hideSublocations = function() {
    var hide;

    hide = false;
    return _.each(this.locationTypes, function(location) {
      if (hide) {
        $("#row-" + location).hide();
      }
      if ($("#" + location).val() === "ALL") {
        return hide = true;
      }
    });
  };

  ReportView.prototype.update = function() {
    var reportOptions, url;

    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text(),
      cluster: $("#cluster").val(),
      summaryField1: $("#summaryField1").val()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return "" + key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  ReportView.prototype.render = function(options) {
    var selectedLocations,
      _this = this;

    this.reportOptions = options;
    this.locationTypes = "region, district, constituan, shehia".split(/, /);
    _.each(this.locationTypes, function(option) {
      if (options[option] === void 0) {
        return this[option] = "ALL";
      } else {
        return this[option] = unescape(options[option]);
      }
    });
    this.reportType = options.reportType || "dashboard";
    this.startDate = options.startDate || moment(new Date).subtract('days', 7).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    this.cluster = options.cluster || "off";
    this.summaryField1 = options.summaryField1;
    this.alertEmail = options.alertEmail || "false";
    this.$el.html("      <style>        table.results th.header, table.results td{          font-size:150%;        }        .malaria-positive{          background-color: pink;        }      </style>      <table id='reportOptions'></table>      <div id='reportContents'></div>      ");
    $("#reportOptions").append(this.formFilterTemplate({
      id: "start",
      label: "Start Date",
      form: "<input id='start' class='date' type='text' value='" + this.startDate + "'/>"
    }));
    $("#reportOptions").append(this.formFilterTemplate({
      id: "end",
      label: "End Date",
      form: "<input id='end' class='date' type='text' value='" + this.endDate + "'/>"
    }));
    selectedLocations = {};
    _.each(this.locationTypes, function(locationType) {
      return selectedLocations[locationType] = this[locationType];
    });
    _.each(this.locationTypes, function(locationType, index) {
      var locationSelectedOneLevelHigher;

      return $("#reportOptions").append(_this.formFilterTemplate({
        type: "location",
        id: locationType,
        label: locationType.capitalize(),
        form: "          <select data-role='selector' id='" + locationType + "'>            " + (locationSelectedOneLevelHigher = selectedLocations[_this.locationTypes[index - 1]], _.map(["ALL"].concat(_this.hierarchyOptions(locationType, locationSelectedOneLevelHigher)), function(hierarchyOption) {
          return "<option " + (hierarchyOption === selectedLocations[locationType] ? "selected='true'" : void 0) + ">" + hierarchyOption + "</option>";
        }).join("")) + "          </select>        "
      }));
    });
    this.hideSublocations();
    $("#reportOptions").append(this.formFilterTemplate({
      id: "report-type",
      label: "Report Type",
      form: "      <select data-role='selector' id='report-type'>        " + (_.map(["dashboard", "locations", "spreadsheet", "summarytables", "analysis", "alerts", "weeklySummary", "periodSummary", "incidenceGraph"], function(type) {
        return "<option " + (type === _this.reportType ? "selected='true'" : void 0) + ">" + type + "</option>";
      }).join("")) + "      </select>      "
    }));
    this[this.reportType]();
    $('div[data-role=fieldcontain]').fieldcontain();
    $('select[data-role=selector]').selectmenu();
    return $('input.date').datebox({
      mode: "calbox",
      dateFormat: "%Y-%m-%d"
    });
  };

  ReportView.prototype.hierarchyOptions = function(locationType, location) {
    if (locationType === "region") {
      return _.keys(WardHierarchy.hierarchy);
    }
    return _.chain(WardHierarchy.hierarchy).map(function(value, key) {
      if (locationType === "district" && location === key) {
        return _.keys(value);
      }
      return _.map(value, function(value, key) {
        if (locationType === "constituan" && location === key) {
          return _.keys(value);
        }
        return _.map(value, function(value, key) {
          if (locationType === "shehia" && location === key) {
            return value;
          }
        });
      });
    }).flatten().compact().value();
  };

  ReportView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;

    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  ReportView.prototype.formFilterTemplate = function(options) {
    return "        <tr id='row-" + options.id + "' class='" + options.type + "'>          <td>            <label style='display:inline' for='" + options.id + "'>" + options.label + "</label>           </td>          <td style='width:150%'>            " + options.form + "          </td>        </tr>    ";
  };

  ReportView.prototype.getCases = function(options) {
    var _this = this;

    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/caseIDsByDate", {
      startkey: moment(this.endDate).endOf("day").format(Coconut.config.get("date_format")),
      endkey: this.startDate,
      descending: true,
      include_docs: false,
      success: function(result) {
        var afterAllCasesDownloaded, caseIDs, cases;

        caseIDs = _.unique(_.pluck(result.rows, "value"));
        cases = _.map(caseIDs, function(caseID) {
          var malariaCase;

          malariaCase = new Case({
            caseID: caseID
          });
          malariaCase.fetch({
            success: function() {
              return afterAllCasesDownloaded();
            }
          });
          return malariaCase;
        });
        return afterAllCasesDownloaded = _.after(caseIDs.length, function() {
          cases = _.chain(cases).map(function(malariaCase) {
            var mostSpecificLocationSelected;

            mostSpecificLocationSelected = _this.mostSpecificLocationSelected();
            if (mostSpecificLocationSelected.name === "ALL" || malariaCase.withinLocation(mostSpecificLocationSelected)) {
              return malariaCase;
            }
          }).compact().value();
          return options.success(cases);
        });
      }
    });
  };

  ReportView.prototype.locations = function() {
    var _this = this;

    $("#reportOptions").append(this.formFilterTemplate({
      id: "cluster",
      label: "Cluster",
      form: "        <select name='cluster' id='cluster' data-role='slider'>          <option value='off'>Off</option>          <option value='on' " + (this.cluster === "on" ? "selected='true'" : '') + "'>On</option>        </select>       "
    }));
    $("#reportContents").html("      Use + - buttons to zoom map. Click and drag to reposition the map. Circles with a darker have multiple cases. Red cases show households with additional positive malaria cases.<br/>      <div id='map' style='width:100%; height:1000px;'></div>    ");
    $("#cluster").slider();
    return this.getCases({
      success: function(results) {
        var cloudmade, clusterGroup, latitudeSum, locations, longitudeSum, map, osm;

        locations = _.compact(_.map(results, function(caseResult) {
          var _ref1, _ref2, _ref3, _ref4;

          if ((_ref1 = caseResult.Household) != null ? _ref1["HouseholdLocation-latitude"] : void 0) {
            return {
              MalariaCaseID: caseResult.caseID,
              latitude: (_ref2 = caseResult.Household) != null ? _ref2["HouseholdLocation-latitude"] : void 0,
              longitude: (_ref3 = caseResult.Household) != null ? _ref3["HouseholdLocation-longitude"] : void 0,
              hasAdditionalPositiveCasesAtHousehold: caseResult.hasAdditionalPositiveCasesAtHousehold(),
              date: (_ref4 = caseResult.Household) != null ? _ref4.lastModifiedAt : void 0
            };
          }
        }));
        if (locations.length === 0) {
          $("#map").html("            <h2>No location information for the range specified.</h2>          ");
          return;
        }
        latitudeSum = _.reduce(locations, function(memo, location) {
          return memo + Number(location.latitude);
        }, 0);
        longitudeSum = _.reduce(locations, function(memo, location) {
          return memo + Number(location.longitude);
        }, 0);
        map = new L.Map('map', {
          center: new L.LatLng(latitudeSum / locations.length, longitudeSum / locations.length),
          zoom: 9
        });
        osm = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        cloudmade = new L.TileLayer('http://{s}.tile.cloudmade.com/4eb20961f7db4d93b9280e8df9b33d3f/997/256/{z}/{x}/{y}.png', {
          maxZoom: 18
        });
        map.addLayer(osm);
        map.addControl(new L.Control.Layers({
          'OSM': osm,
          "Cloudmade": cloudmade,
          "Google": new L.Google('SATELLITE')
        }, {}));
        L.Icon.Default.imagePath = 'js-libraries/Leaflet/images';
        if (_this.cluster === "on") {
          clusterGroup = new L.MarkerClusterGroup();
          _.each(locations, function(location) {
            return L.marker([location.latitude, location.longitude]).addTo(clusterGroup).bindPopup("" + location.date + ": <a href='#show/case/" + location.MalariaCaseID + "'>" + location.MalariaCaseID + "</a>");
          });
          return map.addLayer(clusterGroup);
        } else {
          return _.each(locations, function(location) {
            return L.circleMarker([location.latitude, location.longitude], {
              "fillColor": location.hasAdditionalPositiveCasesAtHousehold ? "red" : ""
            }).addTo(map).bindPopup("                 " + location.date + ": <a href='#show/case/" + location.MalariaCaseID + "'>" + location.MalariaCaseID + "</a>               ");
          });
        }
      }
    });
  };

  ReportView.prototype.spreadsheetXLSXCrashing = function() {
    var questions,
      _this = this;

    questions = null;
    return this.getCases({
      success: function(cases) {
        var allCasesFlattened, csv, fields, spreadsheetData;

        fields = {};
        csv = {};
        allCasesFlattened = _.map(cases, function(malariaCase) {
          var malariaCaseFlattened;

          malariaCaseFlattened = malariaCase.flatten(questions);
          _.each(_.keys(malariaCaseFlattened), function(field) {
            return fields[field] = true;
          });
          return malariaCaseFlattened;
        });
        spreadsheetData = "<?xml version='1.0'?><ss:Workbook xmlns:ss='urn:schemas-microsoft-com:office:spreadsheet'>    <ss:Worksheet ss:Name='Sheet1'>        <ss:Table>            <ss:Column ss:Width='80'/>            <ss:Column ss:Width='80'/>            <ss:Column ss:Width='80'/>            <ss:Row>              " + (_.map(_.keys(fields), function(header) {
          return "                  <ss:Cell>                     <ss:Data ss:Type='String'>" + header + "</ss:Data>                  </ss:Cell>                  ";
        }).join("\n")) + "            </ss:Row>              " + (_.map(allCasesFlattened, function(malariaCaseFlattened) {
          return "                  <ss:Row>                    " + (_.map(fields, function(value, key) {
            return "                        <ss:Cell>                           <ss:Data ss:Type='String'>" + malariaCaseFlattened[key] + "</ss:Data>                        </ss:Cell>                        ";
          }).join(",")) + "                  </ss:Row>                  ";
        }).join("\n")) + "        </ss:Table>    </ss:Worksheet></ss:Workbook>        ";
        $("#reportContents").html("          <a id='csv' href='data:text/octet-stream;base64," + (Base64.encode(spreadsheetData)) + "' download='" + (_this.startDate + "-" + _this.endDate) + ".xml'>Download spreadsheet</a>        ");
        return $("a#csv").button();
      }
    });
  };

  ReportView.prototype.spreadsheet = function() {
    var questions,
      _this = this;

    questions = null;
    return this.getCases({
      success: function(cases) {
        var allCasesFlattened, csvData, csvHeaders, fields;

        fields = {};
        allCasesFlattened = _.map(cases, function(malariaCase) {
          var malariaCaseFlattened;

          malariaCaseFlattened = malariaCase.flatten(questions);
          _.each(_.keys(malariaCaseFlattened), function(field) {
            return fields[field] = true;
          });
          return malariaCaseFlattened;
        });
        csvHeaders = (_.keys(fields)).join(",");
        csvData = _.map(allCasesFlattened, function(malariaCaseFlattened) {
          return _.map(fields, function(value, key) {
            value = malariaCaseFlattened[key];
            if (value === void 0 || value === null) {
              return null;
            } else if (typeof value === "boolean") {
              return value;
            } else {
              if (value.indexOf("\"")) {
                return "\"" + (value.replace(/"/, "\"\"")) + "\"";
              } else if (value.indexOf(",")) {
                return "\"" + value + "\"";
              } else {
                return value;
              }
            }
          }).join(",");
        }).join("\n");
        $("#reportContents").html("          <a id='csv' href='data:text/octet-stream;base64," + (Base64.encode(csvHeaders + "\n" + csvData)) + "' download='" + (_this.startDate + "-" + _this.endDate) + ".csv'>Download spreadsheet</a>        ");
        return $("a#csv").button();
      }
    });
  };

  ReportView.prototype.results = function() {
    var _this = this;

    $("#reportContents").html("      <table id='results' class='tablesorter'>        <thead>          <tr>          </tr>        </thead>        <tbody>        </tbody>      </table>    ");
    return this.getCases({
      success: function(cases) {
        var fields, tableData;

        fields = "MalariaCaseID,LastModifiedAt,Questions".split(",");
        tableData = _.chain(cases).sortBy(function(caseResult) {
          return caseResult.LastModifiedAt();
        }).value().reverse().map(function(caseResult) {
          return _.map(fields, function(field) {
            return caseResult[field]();
          });
        });
        $("table#results thead tr").append("          " + (_.map(fields, function(field) {
          return "<th>" + field + "</th>";
        }).join("")) + "        ");
        return $("table#results tbody").append(_.map(tableData, function(row) {
          return "          <tr>            " + (_.map(row, function(element, index) {
            return "              <td>" + (index === 0 ? "<a href='#show/case/" + element + "'>" + element + "</a>" : element) + "</td>            ";
          }).join("")) + "          </tr>        ";
        }).join(""));
      }
    });
  };

  ReportView.prototype.getFieldListSelector = function(resultCollection, selectorId) {
    var fields;

    fields = _.chain(resultCollection.toJSON()).map(function(result) {
      return _.keys(result);
    }).flatten().uniq().sort().value();
    fields = _.without(fields, "_id", "_rev");
    return "          <br/>          Choose a field to summarize:<br/>          <select data-role='selector' class='summarySelector' id='" + selectorId + "'>            <option></option>            " + (_.map(fields, function(field) {
      return "<option id='" + field + "'>" + field + "</option>";
    }).join("")) + "          </select>        ";
  };

  ReportView.prototype.summarytables = function() {
    var _this = this;

    return Coconut.resultCollection.fetch({
      include_docs: true,
      success: function() {
        $("#reportContents").html(_this.getFieldListSelector(Coconut.resultCollection, "summaryField1"));
        $('#summaryField1').selectmenu();
        if (_this.summaryField1 != null) {
          $('#summaryField1').val(_this.summaryField1);
          $('#summaryField1').selectmenu("refresh");
          return _this.summarize(_this.summaryField1);
        }
      }
    });
  };

  ReportView.prototype.summarySelectorChanged = function(event) {
    this.summarize($(event.target).find("option:selected").text());
    return this.update();
  };

  ReportView.prototype.summarize = function(field) {
    var _this = this;

    return this.getCases({
      success: function(cases) {
        var results;

        results = {};
        _.each(cases, function(caseData) {
          return _.each(caseData.toJSON(), function(value, key) {
            var valuesToCheck;

            valuesToCheck = [];
            if (key === "Household Members") {
              valuesToCheck = value;
            } else {
              valuesToCheck.push(value);
            }
            return _.each(valuesToCheck, function(value, key) {
              if (value[field] != null) {
                if (results[value[field]] == null) {
                  results[value[field]] = {};
                  results[value[field]]["sums"] = 0;
                  results[value[field]]["resultData"] = [];
                }
                results[value[field]]["sums"] += 1;
                return results[value[field]]["resultData"].push({
                  caseID: caseData.caseID,
                  resultID: value._id
                });
              }
            });
          });
        });
        if ($("#summaryTables").length !== 1) {
          _this.$el.append("<div id='summaryTables'></div>");
        }
        $("#summaryTables").html("          <h2>" + field + "</h2>          <table id='summaryTable' class='tablesorter'>            <thead>              <tr>                <th>Value</th>                <th>Total</th>                <th class='cases'>Cases</th>              </tr>            </thead>            <tbody>              " + (_.map(results, function(aggregates, value) {
          return "                  <tr data-row-value='" + value + "'>                    <td>" + value + "</td>                    <td>                      <button class='toggleDisaggregation'>" + aggregates["sums"] + "</button>                    </td>                    <td class='cases'>                      " + (_.map(aggregates.resultData, function(resultData) {
            return "<a data-result-id='" + resultData.resultID + "' data-case-id='" + resultData.caseID + "' data-row-value='" + value + "' class='case' href='#show/case/" + resultData.caseID + "/" + resultData.resultID + "'>" + resultData.caseID + "</a>";
          }).join("")) + "                    </td>                  </tr>                  ";
        }).join("")) + "            </tbody>          </table>          <h3>          Disaggregate summary based on another variable          </h3>        ");
        $("#summaryTables").append($("#summaryField1").clone().attr("id", "summaryField2"));
        $("#summaryField2").selectmenu();
        $("button").button();
        $("a").button();
        return _.each($('table tr'), function(row, index) {
          if (index % 2 === 1) {
            return $(row).addClass("odd");
          }
        });
      }
    });
  };

  ReportView.prototype.toggleDisaggregation = function(event) {
    return $(event.target).parents("td").siblings(".cases").toggle();
  };

  ReportView.prototype.toggleDisaggregationSameCell = function(event) {
    return $(event.target).siblings(".cases").toggle();
  };

  ReportView.prototype.summarySelector2Changed = function(event) {
    return this.disaggregateSummary($(event.target).find("option:selected").text());
  };

  ReportView.prototype.disaggregateSummary = function(field) {
    var afterLookups, cases, data, disaggregatedSummaryTable;

    data = {};
    disaggregatedSummaryTable = $("#summaryTable").clone().attr("id", "disaggregatedSummaryTable");
    cases = disaggregatedSummaryTable.find("a.case");
    _.each(cases, function(caseElement) {
      var result, resultID, rowValue;

      caseElement = $(caseElement);
      rowValue = caseElement.attr("data-row-value");
      if (!data[rowValue]) {
        data[rowValue] = {};
      }
      resultID = caseElement.attr("data-result-id");
      result = new Result({
        _id: resultID
      });
      return result.fetch({
        success: function() {
          var caseData, caseID, fieldValue;

          fieldValue = result.get(field);
          if (fieldValue != null) {
            if (!data[rowValue][fieldValue]) {
              data[rowValue][fieldValue] = 0;
            }
            data[rowValue][fieldValue] += 1;
            return afterLookups();
          } else {
            caseID = caseElement.attr("data-case-id");
            caseData = new Case({
              caseID: caseID
            });
            return caseData.fetch({
              success: function() {
                fieldValue = caseData.flatten()[field];
                if (!data[rowValue][fieldValue]) {
                  data[rowValue][fieldValue] = 0;
                }
                data[rowValue][fieldValue] += 1;
                return afterLookups();
              }
            });
          }
        }
      });
    });
    return afterLookups = _.after(cases.length, function() {
      var columns;

      columns = _.uniq(_.flatten(_.map(data, function(row) {
        return _.keys(row);
      })).sort());
      disaggregatedSummaryTable.find("thead tr").append(_.map(columns, function(column) {
        return "<th>" + column + "</th>";
      }).join(""));
      _.each(data, function(value, rowValue) {
        var row;

        row = disaggregatedSummaryTable.find("tbody tr[data-row-value='" + rowValue + "']");
        return _.each(columns, function(column) {
          if (value[column]) {
            return row.append("<td>" + value[column] + "</td>");
          } else {
            return row.append("<td>0</td>");
          }
        });
      });
      return $("#summaryTables").append(disaggregatedSummaryTable);
    });
  };

  ReportView.prototype.createTable = function(headerValues, rows) {
    return "      <table class='tablesorter'>        <thead>          <tr>            " + (_.map(headerValues, function(header) {
      return "<th>" + header + "</th>";
    }).join("")) + "          </tr>        </thead>        <tbody>          " + rows + "        </tbody>      </table>    ";
  };

  ReportView.prototype.incidenceGraph = function() {
    $("#reportContents").html("<div id='analysis'></div>");
    $("#analysis").append("      <style>      #chart_container {        position: relative;        font-family: Arial, Helvetica, sans-serif;      }      #chart {        position: relative;        left: 40px;      }      #y_axis {        position: absolute;        top: 0;        bottom: 0;        width: 40px;      }      </style>      <div id='chart_container'>        <div id='y_axis'></div>        <div id='chart'></div>      </div>    ");
    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/positiveCases", {
      startkey: "2012",
      include_docs: false,
      success: function(result) {
        var casesPerAggregationPeriod, dataForGraph, graph, x_axis, y_axis;

        casesPerAggregationPeriod = {};
        _.each(result.rows, function(row) {
          var aggregationKey, date;

          date = moment(row.key.substr(0, 10));
          if (row.key.substr(0, 2) === "20" && (date != null ? date.isValid() : void 0) && date > moment.utc("2012-07-01") && date < new moment()) {
            aggregationKey = date.unix();
            if (!casesPerAggregationPeriod[aggregationKey]) {
              casesPerAggregationPeriod[aggregationKey] = 0;
            }
            return casesPerAggregationPeriod[aggregationKey] += 1;
          }
        });
        dataForGraph = _.map(casesPerAggregationPeriod, function(numberOfCases, date) {
          return {
            x: parseInt(date),
            y: numberOfCases
          };
        });
        graph = new Rickshaw.Graph({
          element: document.querySelector("#chart"),
          width: 580,
          height: 250,
          series: [
            {
              color: 'steelblue',
              data: dataForGraph
            }
          ]
        });
        x_axis = new Rickshaw.Graph.Axis.Time({
          graph: graph
        });
        y_axis = new Rickshaw.Graph.Axis.Y({
          graph: graph,
          orientation: 'left',
          tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
          element: document.getElementById('y_axis')
        });
        return graph.render();
      }
    });
  };

  ReportView.prototype.weeklySummary = function(options) {
    var currentOptions, previousOptions, previousPreviousOptions, previousPreviousPreviousOptions;

    if (options == null) {
      options = {};
    }
    currentOptions = _.clone(this.reportOptions);
    currentOptions.startDate = moment().day(1).format(Coconut.config.get("date_format"));
    currentOptions.endDate = moment().day(0 + 7).format(Coconut.config.get("date_format"));
    previousOptions = _.clone(this.reportOptions);
    previousOptions.startDate = moment().day(1 - 7).format(Coconut.config.get("date_format"));
    previousOptions.endDate = moment().day(0 + 7 - 7).format(Coconut.config.get("date_format"));
    previousPreviousOptions = _.clone(this.reportOptions);
    previousPreviousOptions.startDate = moment().day(1 - 7 - 7).format(Coconut.config.get("date_format"));
    previousPreviousOptions.endDate = moment().day(0 + 7 - 7 - 7).format(Coconut.config.get("date_format"));
    previousPreviousPreviousOptions = _.clone(this.reportOptions);
    previousPreviousPreviousOptions.startDate = moment().day(1 - 7 - 7 - 7).format(Coconut.config.get("date_format"));
    previousPreviousPreviousOptions.endDate = moment().day(0 + 7 - 7 - 7 - 7).format(Coconut.config.get("date_format"));
    options.optionsArray = [previousPreviousPreviousOptions, previousPreviousOptions, previousOptions, currentOptions];
    $("#row-start").hide();
    $("#row-end").hide();
    return this.periodSummary(options);
  };

  ReportView.prototype.periodSummary = function(options) {
    var amountOfTime, dataValue, district, optionsArray, previousOptions, previousPreviousOptions, previousPreviousPreviousOptions, renderDataElement, renderTable, reportIndex, results,
      _this = this;

    if (options == null) {
      options = {};
    }
    district = options.district || "ALL";
    $("#reportContents").html("        <style>          .data{            display:none          }          table.tablesorter tbody td.trend{            vertical-align: middle;          }          .period-2.trend i{            font-size:75%          }        </style>        <div id='messages'></div>        <div id='alerts'>          <h2>Loading Data Summary...</h2>        </div>      ");
    this.reportOptions.startDate = this.reportOptions.startDate || moment(new Date).subtract('days', 7).format("YYYY-MM-DD");
    this.reportOptions.endDate = this.reportOptions.endDate || moment(new Date).format("YYYY-MM-DD");
    $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/byCollection", {
      key: "help",
      include_docs: true,
      success: function(result) {
        var messages;

        messages = _(result.rows).chain().map(function(data) {
          if (!(moment(_this.reportOptions.startDate).isBefore(data.value.date) && moment(_this.reportOptions.endDate).isAfter(data.value.date))) {
            return;
          }
          return "" + data.value.date + ": " + data.value.text + "<br/>";
        }).compact().value().join("");
        if (messages !== "") {
          return $("#messages").html("          <h2>Help Messages</h2>          " + messages + "        ");
        }
      }
    });
    if (options.optionsArray) {
      console.log(options.optionsArray);
      optionsArray = options.optionsArray;
    } else {
      amountOfTime = moment(this.reportOptions.endDate).diff(moment(this.reportOptions.startDate));
      previousOptions = _.clone(this.reportOptions);
      previousOptions.startDate = moment(this.reportOptions.startDate).subtract("milliseconds", amountOfTime).format(Coconut.config.get("date_format"));
      previousOptions.endDate = this.reportOptions.startDate;
      previousPreviousOptions = _.clone(this.reportOptions);
      previousPreviousOptions.startDate = moment(previousOptions.startDate).subtract("milliseconds", amountOfTime).format(Coconut.config.get("date_format"));
      previousPreviousOptions.endDate = previousOptions.startDate;
      previousPreviousPreviousOptions = _.clone(this.reportOptions);
      previousPreviousPreviousOptions.startDate = moment(previousPreviousOptions.startDate).subtract("milliseconds", amountOfTime).format(Coconut.config.get("date_format"));
      previousPreviousPreviousOptions.endDate = previousPreviousOptions.startDate;
      optionsArray = [previousPreviousPreviousOptions, previousPreviousOptions, previousOptions, this.reportOptions];
    }
    results = [];
    dataValue = function(data) {
      if (data.disaggregated != null) {
        return data.disaggregated.length;
      } else if (data.percent != null) {
        return _this.formattedPercent(data.percent);
      } else if (data.text != null) {
        return data.text;
      }
    };
    renderDataElement = function(data) {
      var output;

      if (data.disaggregated != null) {
        output = _this.createDisaggregatableCaseGroup(data.disaggregated.length, data.disaggregated);
        if (data.appendPercent != null) {
          output += " (" + (_this.formattedPercent(data.appendPercent)) + ")";
        }
        return output;
      } else if (data.percent != null) {
        return _this.formattedPercent(data.percent);
      } else if (data.text != null) {
        return data.text;
      }
    };
    renderTable = _.after(optionsArray.length, function() {
      var extractNumber, index, swapColumns;

      $("#alerts").html("        <h2>Data Summary</h2>        <table id='alertsTable' class='tablesorter'>          <tbody>            " + (index = 0, _(results[0]).map(function(firstResult) {
        var element, period, sum;

        return "                <tr class='" + (index % 2 === 0 ? "odd" : "even") + "'>                  <td>" + firstResult.title + "</td>                  " + (period = results.length, sum = 0, element = _.map(results, function(result) {
          sum += parseInt(dataValue(result[index]));
          return "                        <td class='period-" + (period -= 1) + " trend'></td>                        <td class='period-" + period + " data'>" + (renderDataElement(result[index])) + "</td>                        " + (period === 0 ? "<td class='average-for-previous-periods'>" + (sum / results.length) + "</td>" : "") + "                      ";
        }).join(""), index += 1, element) + "                </tr>                ";
      }).join("")) + "          </tbody>        </table>        <button class='toggle-trend-data'>Show trend data</button>      ");
      extractNumber = function(element) {
        var result;

        result = parseInt(element.text());
        if (isNaN(result)) {
          return parseInt(element.find("button").text());
        } else {
          return result;
        }
      };
      _(results.length - 1).times(function(period) {
        return _.each($(".period-" + period + ".data"), function(dataElement) {
          var current, previous;

          dataElement = $(dataElement);
          current = extractNumber(dataElement);
          previous = extractNumber(dataElement.prev().prev());
          return dataElement.prev().html(current === previous ? "-" : current > previous ? "<span class='up-arrow'>&uarr;</span>" : "<span class='down-arrow'>&darr;</span>");
        });
      });
      _.each($(".period-0.trend"), function(period0Trend) {
        period0Trend = $(period0Trend);
        if (period0Trend.prev().prev().find("span").attr("class") === period0Trend.find("span").attr("class")) {
          return period0Trend.find("span").attr("style", "color:red");
        }
      });
      $(".period-0.data").show();
      $(".period-" + (results.length - 1) + ".trend").hide();
      $(".period-1.trend").attr("style", "font-size:75%");
      $(".trend");
      $("td:contains(Period)").siblings(".trend").find("i").hide();
      $(".period-0.data").show();
      $($(".average-for-previous-periods")[0]).html("Average for previous " + (results.length - 1) + " periods");
      swapColumns = function(table, colIndex1, colIndex2) {
        var cell1, cell2, row, siblingCell1, t, _i, _len, _ref1, _results;

        if (!colIndex1 < colIndex2) {
          t = colIndex1;
          colIndex1 = colIndex2;
          colIndex2 = t;
        }
        if (table && table.rows && table.insertBefore && colIndex1 !== colIndex2) {
          _ref1 = table.rows;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            row = _ref1[_i];
            cell1 = row.cells[colIndex1];
            cell2 = row.cells[colIndex2];
            siblingCell1 = row.cells[Number(colIndex1) + 1];
            row.insertBefore(cell1, cell2);
            _results.push(row.insertBefore(cell2, siblingCell1));
          }
          return _results;
        }
      };
      swapColumns($("#alertsTable")[0], 8, 9);
      if (_this.alertEmail === "true") {
        $(".ui-datebox-container").remove();
        $("#navbar").remove();
        $("#reportOptions").remove();
        $("[data-role=footer]").remove();
        $(".cases").remove();
        $(".toggle-trend-data").remove();
        _(["odd", "even"]).each(function(oddOrEven) {
          return _($("." + oddOrEven + " td")).each(function(td) {
            return $(td).attr("style", "" + ($(td).attr("style") || "") + "; background-color: " + ($("." + oddOrEven + " td").css("background-color")));
          });
        });
        $("td:hidden").remove();
      }
      return $("#alerts").append("<span id='#done'/>");
    });
    reportIndex = 0;
    return _.each(optionsArray, function(options) {
      var anotherIndex, reports,
        _this = this;

      anotherIndex = reportIndex;
      reportIndex++;
      reports = new Reports(options);
      return reports.alerts(function(data) {
        results[anotherIndex] = [
          {
            title: "Period",
            text: "" + (moment(options.startDate).format("YYYY-MM-DD")) + " -> " + (moment(options.endDate).format("YYYY-MM-DD"))
          }, {
            title: "No. of cases reported at health facilities",
            disaggregated: data.followupsByDistrict[district].meedsCases
          }, {
            title: "No. of cases reported at health facilities not followed up",
            disaggregated: data.followupsByDistrict[district].meedsCasesNotFollowedUp
          }, {
            title: "% of cases reported at health facilities followed up",
            percent: 1 - (data.followupsByDistrict[district].meedsCasesFollowedUp.length / data.followupsByDistrict[district].meedsCases.length)
          }, {
            title: "Total No. of cases (including cases not reported by facilities) followed up",
            disaggregated: data.followupsByDistrict[district].casesFollowedUp
          }, {
            title: "No. of additional household members tested",
            disaggregated: data.passiveCasesByDistrict[district].householdMembers
          }, {
            title: "No. of additional household members tested positive",
            disaggregated: data.passiveCasesByDistrict[district].passiveCases
          }, {
            title: "% of household members tested positive",
            percent: data.passiveCasesByDistrict[district].passiveCases.length / data.passiveCasesByDistrict[district].householdMembers.length
          }, {
            title: "% increase in cases found using MCN",
            percent: data.passiveCasesByDistrict[district].passiveCases.length / data.passiveCasesByDistrict[district].indexCases.length
          }, {
            title: "No. of positive cases (index & household) in persons under 5",
            disaggregated: data.agesByDistrict[district].underFive
          }, {
            title: "Percent of positive cases (index & household) in persons under 5",
            percent: data.agesByDistrict[district].underFive.length / data.totalPositiveCasesByDistrict[district].length
          }, {
            title: "Positive Cases (index & household)",
            disaggregated: data.totalPositiveCasesByDistrict[district]
          }, {
            title: "Positive Cases (index & household) that slept under a net night before diagnosis (percent)",
            disaggregated: data.netsAndIRSByDistrict[district].sleptUnderNet,
            appendPercent: data.netsAndIRSByDistrict[district].sleptUnderNet.length / data.totalPositiveCasesByDistrict[district].length
          }, {
            title: "Positive Cases from a household that has been sprayed within last " + Coconut.IRSThresholdInMonths + " months",
            disaggregated: data.netsAndIRSByDistrict[district].recentIRS,
            appendPercent: data.netsAndIRSByDistrict[district].recentIRS.length / data.totalPositiveCasesByDistrict[district].length
          }, {
            title: "Positive Cases (index & household) that traveled within last month (percent)",
            disaggregated: data.travelByDistrict[district].travelReported,
            appendPercent: data.travelByDistrict[district].travelReported.length / data.totalPositiveCasesByDistrict[district].length
          }
        ];
        return renderTable();
      });
      /*
      $.ajax
        type: "POST"
        url: "https://api.mailgun.net/v2/samples.mailgun.org/messages"
        username: "api:key-8h-nx3dvfxktuajc008y8092gkvsv500"
        dataType: "json"
        data:
          from: "mikeymckay@gmail.com"
          to: "mikeymckay@gmail.com"
          subject: "test"
          text: "YO"
      */

    });
  };

  ReportView.prototype.analysis = function() {
    var reports,
      _this = this;

    reports = new Reports(this.reportOptions);
    return reports.alerts(function(data) {
      $("#reportContents").html("<div id='analysis'><hr/><div style='font-style:italic'>Click on a column heading to sort.</div><hr/></div>");
      $("#analysis").append(_this.createTable("District, No. of MEEDS cases reported, No. of MEEDS cases followed up, % of MEEDS cases followed up, Total No. of cases followed up".split(/, */), "        " + (_.map(data.followupsByDistrict, function(values, district) {
        return "              <tr>                <td>" + district + "</td>                <td>" + (_this.createDisaggregatableCaseGroup(values.meedsCases.length, values.meedsCases)) + "</td>                <td>" + (_this.createDisaggregatableCaseGroup(values.meedsCasesFollowedUp.length, values.meedsCasesFollowedUp)) + "</td>                <td>" + (_this.formattedPercent(values.meedsCasesFollowedUp.length / values.meedsCases.length)) + "</td>                <td>" + (_this.createDisaggregatableCaseGroup(values.casesFollowedUp.length, values.casesFollowedUp)) + "</td>              </tr>            ";
      }).join("")) + "      "));
      $("#analysis").append("<hr>");
      $("#analysis").append(_this.createTable("District, No. of case notifications, No. of additional household members tested, No. of additional household members tested positive, % of household members tested positive, % increase in cases found using MCN".split(/, */), "        " + (_.map(data.passiveCasesByDistrict, function(values, district) {
        return "              <tr>                <td>" + district + "</td>                <td>" + (_this.createDisaggregatableCaseGroup(values.indexCases.length, values.indexCases)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.householdMembers.length, values.householdMembers)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.passiveCases.length, values.passiveCases)) + "</td>                <td>" + (_this.formattedPercent(values.passiveCases.length / values.householdMembers.length)) + "</td>                <td>" + (_this.formattedPercent(values.passiveCases.length / values.indexCases.length)) + "</td>              </tr>            ";
      }).join("")) + "      "));
      $("#analysis").append("<hr>");
      $("#analysis").append(_this.createTable("District, <5, 5<15, 15<25, >=25, Unknown, Total, %<5, %5<15, %15<25, %>=25, Unknown".split(/, */), "        " + (_.map(data.agesByDistrict, function(values, district) {
        return "              <tr>                <td>" + district + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.underFive.length, values.underFive)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.fiveToFifteen.length, values.fiveToFifteen)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.fifteenToTwentyFive.length, values.fifteenToTwentyFive)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.overTwentyFive.length, values.overTwentyFive)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.unknown.length, values.overTwentyFive)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(data.totalPositiveCasesByDistrict[district].length, data.totalPositiveCasesByDistrict[district])) + "</td>                <td>" + (_this.formattedPercent(values.underFive.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>                <td>" + (_this.formattedPercent(values.fiveToFifteen.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>                <td>" + (_this.formattedPercent(values.fifteenToTwentyFive.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>                <td>" + (_this.formattedPercent(values.overTwentyFive.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>                <td>" + (_this.formattedPercent(values.unknown.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>              </tr>            ";
      }).join("")) + "      "));
      $("#analysis").append("<hr>");
      $("#analysis").append(_this.createTable(("District, Positive Cases, Positive Cases (index & household) that slept under a net night before diagnosis, %, Positive Cases from a household that has been sprayed within last " + Coconut.IRSThresholdInMonths + " months, %").split(/, */), "        " + (_.map(data.netsAndIRSByDistrict, function(values, district) {
        return "              <tr>                <td>" + district + "</td>                <td>" + (_this.createDisaggregatableDocGroup(data.totalPositiveCasesByDistrict[district].length, data.totalPositiveCasesByDistrict[district])) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.sleptUnderNet.length, values.sleptUnderNet)) + "</td>                <td>" + (_this.formattedPercent(values.sleptUnderNet.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.recentIRS.length, values.recentIRS)) + "</td>                <td>" + (_this.formattedPercent(values.recentIRS.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>              </tr>            ";
      }).join("")) + "      "));
      $("#analysis").append("<hr>");
      $("#analysis").append(_this.createTable("District, Positive Cases, Positive Cases (index & household) that traveled within last month, %".split(/, */), "        " + (_.map(data.travelByDistrict, function(values, district) {
        return "              <tr>                <td>" + district + "</td>                <td>" + (_this.createDisaggregatableDocGroup(data.totalPositiveCasesByDistrict[district].length, data.totalPositiveCasesByDistrict[district])) + "</td>                <td>" + (_this.createDisaggregatableDocGroup(values.travelReported.length, values.travelReported)) + "</td>                <td>" + (_this.formattedPercent(values.travelReported.length / data.totalPositiveCasesByDistrict[district].length)) + "</td>              </tr>            ";
      }).join("")) + "      "));
      return $("#analysis table").tablesorter({
        widgets: ['zebra'],
        sortList: [[0, 0]],
        textExtraction: function(node) {
          var sortValue;

          sortValue = $(node).find(".sort-value").text();
          if (sortValue !== "") {
            return sortValue;
          } else {
            if ($(node).text() === "--") {
              return "-1";
            } else {
              return $(node).text();
            }
          }
        }
      });
    });
  };

  ReportView.prototype.formattedPercent = function(number) {
    var percent;

    percent = (number * 100).toFixed(0);
    if (isNaN(percent)) {
      return "--";
    } else {
      return "" + percent + "%";
    }
  };

  ReportView.prototype.dashboard = function() {
    var tableColumns,
      _this = this;

    $("tr.location").hide();
    $("#reportContents").html("      <!--      Reported/Facility Followup/Household Followup/#Tested/ (Show for Same period last year)      For completed cases, average time between notification and household followup      Last seven days      Last 30 days      Last 365 days      Current month      Current year      Total      -->      <h2>Alerts</h2>      <div id='alerts'></div>      <h1>        Cases      </h2>      For the selected period:<br/>      <table>        <tr>          <td>Cases Reported at Facility</td>          <td id='Cases-Reported-at-Facility'></td>        </tr>        <tr>          <td>Additional People Tested</td>          <td id='Additional-People-Tested'></td>        </tr>        <tr>          <td>Additional People Tested Positive</td>          <td id='Additional-People-Tested-Positive'></td>        </tr>      </table>      <br/>      Click on a button for more details about the case. Pink buttons are for <span style='background-color:pink'> positive malaria results.</span>      <table class='summary tablesorter'>        <thead><tr>        </tr></thead>        <tbody>        </tbody>      </table>      <style>        table a, table a:link, table a:visited {color: blue; font-size: 150%}      </style>    ");
    tableColumns = ["Case ID", "Diagnosis Date", "Health Facility District", "USSD Notification"];
    Coconut.questions.fetch({
      success: function() {
        tableColumns = tableColumns.concat(Coconut.questions.map(function(question) {
          return question.label();
        }));
        return _.each(tableColumns, function(text) {
          return $("table.summary thead tr").append("<th>" + text + " (<span id='th-" + (text.replace(/\s/, "")) + "-count'></span>)</th>");
        });
      }
    });
    return this.getCases({
      success: function(cases) {
        var afterRowsAreInserted;

        _.each(cases, function(malariaCase) {
          return malariaCase.fetch({
            success: function() {
              $("table.summary tbody").append("                <tr id='case-" + malariaCase.caseID + "'>                  <td class='CaseID'>                    <a href='#show/case/" + malariaCase.caseID + "'><button>" + malariaCase.caseID + "</button></a>                  </td>                  <td class='IndexCaseDiagnosisDate'>                    " + (malariaCase.indexCaseDiagnosisDate()) + "                  </td>                  <td class='HealthFacilityDistrict'>                    " + (malariaCase["USSD Notification"] != null ? FacilityHierarchy.getDistrict(malariaCase["USSD Notification"].hf) : "") + "                  </td>                  <td class='USSDNotification'>                    " + (_this.createDashboardLinkForResult(malariaCase, "USSD Notification", "<img src='images/ussd.png'/>")) + "                  </td>                  <td class='CaseNotification'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Case Notification", "<img src='images/caseNotification.png'/>")) + "                  </td>                  <td class='Facility'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Facility", "<img src='images/facility.png'/>")) + "                  </td>                  <td class='Household'>                    " + (_this.createDashboardLinkForResult(malariaCase, "Household", "<img src='images/household.png'/>")) + "                  </td>                  <td class='HouseholdMembers'>                    " + (_.map(malariaCase["Household Members"], function(householdMember) {
                var buttonText;

                buttonText = "<img src='images/householdMember.png'/>";
                if (householdMember.complete == null) {
                  if (!householdMember.complete) {
                    buttonText = buttonText.replace(".png", "Incomplete.png");
                  }
                }
                return _this.createCaseLink({
                  caseID: malariaCase.caseID,
                  docId: householdMember._id,
                  buttonClass: (householdMember.MalariaTestResult != null) && (householdMember.MalariaTestResult === "PF" || householdMember.MalariaTestResult === "Mixed") ? "malaria-positive" : "",
                  buttonText: buttonText
                });
              }).join("")) + "                  </td>                </tr>              ");
              return afterRowsAreInserted();
            }
          });
        });
        return afterRowsAreInserted = _.after(cases.length, function() {
          var districtsWithFollowup;

          _.each(tableColumns, function(text) {
            var columnId;

            columnId = text.replace(/\s/, "");
            return $("#th-" + columnId + "-count").html($("td." + columnId + " button").length);
          });
          $("#Cases-Reported-at-Facility").html($("td.CaseID button").length);
          $("#Additional-People-Tested").html($("td.HouseholdMembers button").length);
          $("#Additional-People-Tested-Positive").html($("td.HouseholdMembers button.malaria-positive").length);
          if ($("table.summary tr").length > 1) {
            $("table.summary").tablesorter({
              widgets: ['zebra'],
              sortList: [[1, 1]]
            });
          }
          districtsWithFollowup = {};
          _.each($("table.summary tr"), function(row) {
            row = $(row);
            if (row.find("td.USSDNotification button").length > 0) {
              if (row.find("td.CaseNotification button").length === 0) {
                if (moment().diff(row.find("td.IndexCaseDiagnosisDate").html(), "days") > 2) {
                  if (districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] == null) {
                    districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] = 0;
                  }
                  return districtsWithFollowup[row.find("td.HealthFacilityDistrict").html()] += 1;
                }
              }
            }
          });
          return $("#alerts").append("          <style>            #alerts,table.alerts{              font-size: 80%             }          </style>          The following districts have USSD Notifications that have not been followed up after two days. Recommendation call the DMSO:            <table class='alerts'>              <thead>                <tr>                  <th>District</th><th>Number of cases</th>                </tr>              </thead>              <tbody>                " + (_.map(districtsWithFollowup, function(numberOfCases, district) {
            return "                    <tr>                      <td>" + district + "</td>                      <td>" + numberOfCases + "</td>                    </tr>                  ";
          }).join("")) + "              </tbody>            </table>          ");
        });
      }
    });
  };

  ReportView.prototype.createDashboardLinkForResult = function(malariaCase, resultType, buttonText) {
    if (buttonText == null) {
      buttonText = "";
    }
    if (malariaCase[resultType] != null) {
      if (malariaCase[resultType].complete == null) {
        if (!malariaCase[resultType].complete) {
          if (resultType !== "USSD Notification") {
            buttonText = buttonText.replace(".png", "Incomplete.png");
          }
        }
      }
      return this.createCaseLink({
        caseID: malariaCase.caseID,
        docId: malariaCase[resultType]._id,
        buttonText: buttonText
      });
    } else {
      return "";
    }
  };

  ReportView.prototype.createCaseLink = function(options) {
    var _ref1;

    if ((_ref1 = options.buttonText) == null) {
      options.buttonText = options.caseID;
    }
    return "<a href='#show/case/" + options.caseID + (options.docId != null ? "/" + options.docId : "") + "'><button class='" + options.buttonClass + "'>" + options.buttonText + "</button></a>";
  };

  ReportView.prototype.createCasesLinks = function(cases) {
    var _this = this;

    return _.map(cases, function(malariaCase) {
      return _this.createCaseLink({
        caseID: malariaCase.caseID
      });
    }).join("");
  };

  ReportView.prototype.createDisaggregatableCaseGroup = function(text, cases) {
    return "      <button class='sort-value same-cell-disaggregatable'>" + text + "</button>      <div class='cases' style='display:none'>        " + (this.createCasesLinks(cases)) + "      </div>    ";
  };

  ReportView.prototype.createDocLinks = function(docs) {
    var _this = this;

    return _.map(docs, function(doc) {
      return _this.createCaseLink({
        caseID: doc.MalariaCaseID,
        docId: doc._id
      });
    }).join("");
  };

  ReportView.prototype.createDisaggregatableDocGroup = function(text, docs) {
    return "      <button class='sort-value same-cell-disaggregatable'>" + text + "</button>      <div class='cases' style='display:none'>        " + (this.createDocLinks(docs)) + "      </div>    ";
  };

  return ReportView;

})(Backbone.View);

/*
//@ sourceMappingURL=ReportView.map
*/
