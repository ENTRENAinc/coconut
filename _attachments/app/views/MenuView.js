// Generated by CoffeeScript 1.3.3
var MenuView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MenuView = (function(_super) {

  __extends(MenuView, _super);

  function MenuView() {
    this.render = __bind(this.render, this);
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.el = '.question-buttons';

  MenuView.prototype.events = {
    "change": "render"
  };

  MenuView.prototype.render = function() {
    var _this = this;
    this.$el.html("      <div id='navbar' data-role='navbar'>        <ul></ul>      </div>    ");
    return Coconut.questions.fetch({
      success: function() {
        _this.$el.find("ul").html(Coconut.questions.map(function(question, index) {
          return "<li><a id='menu-" + index + "' href='#show/results/" + (escape(question.id)) + "'><h2>" + question.id + "<div id='menu-partial-amount'></div></h2></a></li>";
        }).join(" "));
        $(".question-buttons").navbar();
        return _this.update();
      }
    });
  };

  MenuView.prototype.update = function() {
    var _ref,
      _this = this;
    if ((_ref = Coconut.resultCollection) == null) {
      Coconut.resultCollection = new ResultCollection();
    }
    Coconut.resultCollection.fetch({
      success: function() {
        return Coconut.questions.each(function(question, index) {
          var numberPartialResults;
          numberPartialResults = Coconut.resultCollection.partialResults(question.id).length;
          return $("#menu-" + index + " #menu-partial-amount").html(Coconut.resultCollection.partialResults(question.id).length);
        });
      }
    });
    return $.couch.db(Coconut.config.database_name()).allDesignDocs({
      success: function(result) {
        var revision, shortened_revision, _ref1;
        revision = (_ref1 = result.rows[0]) != null ? _ref1.value.rev : void 0;
        shortened_revision = revision.substring(0, revision.indexOf("-") + 1) + revision.substring(revision.length - 2);
        return $("#version").html(shortened_revision);
      },
      error: $("#version").html("-")
    });
  };

  return MenuView;

})(Backbone.View);
