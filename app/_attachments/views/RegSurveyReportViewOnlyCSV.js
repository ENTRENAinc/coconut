// Generated by CoffeeScript 1.6.3
var RegSurveyReportViewOnlyCSV, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RegSurveyReportViewOnlyCSV = (function(_super) {
  __extends(RegSurveyReportViewOnlyCSV, _super);

  function RegSurveyReportViewOnlyCSV() {
    _ref = RegSurveyReportViewOnlyCSV.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  RegSurveyReportViewOnlyCSV.prototype.el = "#content";

  RegSurveyReportViewOnlyCSV.prototype.events = {
    "keyup #search": "filter"
  };

  RegSurveyReportViewOnlyCSV.prototype.getRegistrationsAndFetch = function() {
    var db, registrations, results, _this;
    results = void 0;
    _this = this;
    registrations = void 0;
    results = new ResultCollection;
    results.model = Result;
    results.url = "result";
    db = $.couch.db("coconut");
    return db.view("coconut/byUUIDRegistration", {
      success: function(data) {
        var dataByUUID, idx, uuid;
        dataByUUID = [];
        for (idx in data.rows) {
          uuid = data.rows[idx].key;
          dataByUUID[uuid] = data.rows[idx].value;
        }
        _this.registrations = dataByUUID;
        data = [];
        _this.complete = 'true';
        if (_this.options.complete !== void 0 && _this.options.complete !== 'true') {
          _this.complete = 'false';
        }
        return results.fetch({
          "question": _this.quid,
          "complete": _this.complete,
          success: function(allResults) {
            _this.fields = getSurveyFields();
            _this.results = allResults.where({
              question: _this.quid
            });
            return _this.render();
          }
        });
      },
      error: function(data) {
        return alert("Someting wrong");
      }
    });
  };

  RegSurveyReportViewOnlyCSV.prototype.initialize = function(options) {
    var key, urlParams, value;
    urlParams = [];
    this.$el.append('<div id="reportloader"><marquee ALIGN="Top" LOOP="infinite"  DIRECTION="right" style="font-size:24px; color:#FF8000">Cargando el informe. Por favor espera ...</marquee></div>');
    this.options = options;
    for (key in options) {
      value = options[key];
      this[key] = value;
      if (key !== "startDate" && key !== "endDate") {
        urlParams.push("" + key + "=" + value + "");
      }
    }
    this.urlParams = urlParams;
    return this.getRegistrationsAndFetch();
  };

  RegSurveyReportViewOnlyCSV.prototype.filter = function(event) {
    var id, query, row, _ref1, _results;
    query = this.$el.find("#search").val();
    _ref1 = this.searchRows;
    _results = [];
    for (id in _ref1) {
      row = _ref1[id];
      if (~row.indexOf(query) || query.length < 3) {
        _results.push(this.$el.find(".row-" + id).show());
      } else {
        _results.push(this.$el.find(".row-" + id).hide());
      }
    }
    return _results;
  };

  RegSurveyReportViewOnlyCSV.prototype.render = function() {
    var a, birthday, blob, csvContent, e, field, headers, headersNum, i, innerValue, isRegExist, jsonField, key, regvals, regvalues, result, resval, total, uuid, _i, _j, _len, _len1, _ref1, _ref2;
    this.searchRows = {};
    total = 0;
    headers = [];
    regvals = null;
    isRegExist = false;
    headersNum = 0;
    if (this.results === void 0) {
      return;
    }
    _ref1 = this.results;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      result = _ref1[_i];
      if (this['provider_id'] !== void 0 && result.get('provider_id') !== this['provider_id']) {
        continue;
      }
    }
    csvContent = "\uFEFF";
    csvContent += "Fecha,Nombre,Apellido,Apodo,Fecha de Nacimiento, Calleynumero,Provincia,Municipio,BarrioComunidad,";
    i = 0;
    while (i < this.fields.length) {
      jsonField = this.fields[i];
      for (key in jsonField) {
        if (jsonField.hasOwnProperty(key)) {
          innerValue = key;
          resval = innerValue.replace(/"/g, '""');
          if (resval.search(/("|,|\n)/g) >= 0) {
            resval = '"' + resval + '"';
          }
          csvContent += resval + ',';
        }
      }
      i++;
    }
    csvContent += "\n";
    _ref2 = this.results;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      result = _ref2[_j];
      if (this['provider_id'] !== void 0 && result.get('provider_id') !== this['provider_id']) {
        continue;
      }
      isRegExist = false;
      uuid = result.get("uuid");
      if (this.registrations[uuid] !== void 0) {
        isRegExist = true;
        regvalues = this.registrations[uuid].replace(/[//]/g, '');
        regvalues = this.registrations[uuid].replace(/[//]/g, '');
        try {
          regvals = jQuery.parseJSON(regvalues);
          csvContent += '"' + regvals.Fecha + '"' + ',';
          csvContent += '"' + regvals.Nombre + '"' + ',';
          csvContent += '"' + regvals.Apellido + '"' + ',';
          csvContent += '"' + regvals.Apodo + '"' + ',';
          birthday = regvals.Día + "/" + regvals.Mes + "/" + regvals.Año;
          csvContent += '"' + birthday + '"' + ',';
          csvContent += '"' + regvals.Calleynumero + '"' + ',';
          csvContent += '"' + regvals.Provincia + '"' + ',';
          csvContent += '"' + regvals.Municipio + '"' + ',';
          csvContent += '"' + regvals.BarrioComunidad + '"' + ',';
        } catch (_error) {
          e = _error;
          isRegExist = false;
        }
      }
      if (isRegExist === false) {
        continue;
      }
      isRegExist = false;
      this.searchRows[result.id] = "";
      i = 0;
      while (i < this.fields.length) {
        jsonField = this.fields[i];
        for (key in jsonField) {
          if (jsonField.hasOwnProperty(key)) {
            innerValue = "";
            field = jsonField[key];
            if (result.get(field) === void 0 || result.get(field) === null) {
              innerValue = '';
            } else {
              innerValue = result.get(field).toString();
            }
            resval = innerValue.replace(/"/g, '""');
            if (resval.search(/("|,|\n)/g) >= 0) {
              resval = '"' + resval + '"';
            }
            csvContent += resval + ',';
          }
        }
        i++;
      }
      csvContent += "\n";
    }
    a = document.createElement('a');
    blob = new Blob([csvContent], {
      'type': 'text/csv;charset=utf-8'
    });
    a.href = window.URL.createObjectURL(blob);
    a.download = "report.csv";
    $('#reportloader').hide();
    return a.click();
  };

  return RegSurveyReportViewOnlyCSV;

})(Backbone.View);

/*
//@ sourceMappingURL=RegSurveyReportViewOnlyCSV.map
*/
