// Generated by CoffeeScript 1.6.3
var RegSurveyReportView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RegSurveyReportView = (function(_super) {
  __extends(RegSurveyReportView, _super);

  function RegSurveyReportView() {
    _ref = RegSurveyReportView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  RegSurveyReportView.prototype.el = "#content";

  RegSurveyReportView.prototype.events = {
    "keyup #search": "filter"
  };

  RegSurveyReportView.prototype.getRegistrationsAndFetch = function() {
    var db, registrations, results, _this;
    results = void 0;
    _this = this;
    registrations = void 0;
    results = new ResultCollection;
    results.model = Result;
    results.url = "result";
    db = $.couch.db("coconut");
    return db.view("coconut/byUUIDRegistration", {
      success: function(data) {
        _this.registrations = data;
        return results.fetch({
          "question": _this.quid,
          success: function(allResults) {
            var fields;
            fields = void 0;
            console.log(allResults.first());
            window.allResults = allResults;
            _this.results = allResults.where({
              question: _this.quid
            });
            fields = _.chain(_this.results).map(function(result) {
              return _.keys(result.attributes);
            }).flatten().uniq().value();
            _this.fields = _(fields).without("_id", "_rev", "quid", "reportType", "test", "user", "question", "collection", "user_name", "isActions", "lastModifiedAt", "provider_id");
            return _this.render();
          }
        });
      },
      error: function(data) {
        return alert("Someting wrong");
      }
    });
  };

  RegSurveyReportView.prototype.initialize = function(options) {
    var key, urlParams, value;
    urlParams = [];
    for (key in options) {
      value = options[key];
      this[key] = value;
      if (key !== "startDate" && key !== "endDate") {
        urlParams.push("" + key + "=" + value + "");
      }
    }
    this.urlParams = urlParams;
    return this.getRegistrationsAndFetch();
  };

  RegSurveyReportView.prototype.filter = function(event) {
    var id, query, row, _ref1, _results;
    query = this.$el.find("#search").val();
    _ref1 = this.searchRows;
    _results = [];
    for (id in _ref1) {
      row = _ref1[id];
      if (~row.indexOf(query) || query.length < 3) {
        _results.push(this.$el.find(".row-" + id).show());
      } else {
        _results.push(this.$el.find(".row-" + id).hide());
      }
    }
    return _results;
  };

  RegSurveyReportView.prototype.render = function() {
    var e, field, headers, html, i, isRegExist, regvals, regvalues, result, total, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4;
    this.searchRows = {};
    total = 0;
    headers = [];
    regvals = null;
    isRegExist = false;
    if (this.results === void 0) {
      return;
    }
    _ref1 = this.results;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      result = _ref1[_i];
      if (this['provider_id'] !== void 0 && result.get('provider_id') !== this['provider_id']) {
        continue;
      }
      total++;
    }
    html = "<div style='font-size: 10pt'><input type='text' id='search' placeholder='filter'>&nbsp;&nbsp;<b>Entradas totales: " + total + "</b></div><br>";
    html += "<div style='overflow:auto;'><table class='tablesorter'>          <thead>            <tr>";
    html += "<th>Fecha</th><th>Nombre</th><th>Apellido</th><th>Apodo</th><th>Calleynumero</th><th>Provincia</th><th>Municipio</th><th>BarrioComunidad</th>";
    _ref2 = this.fields;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      field = _ref2[_j];
      html += "<th>" + field + "</th>";
      headers[_j] = field;
    }
    html += "</tr></thead>        <tbody>";
    _ref3 = this.results;
    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
      result = _ref3[_k];
      if (this['provider_id'] !== void 0 && result.get('provider_id') !== this['provider_id']) {
        continue;
      }
      html += "<tr class='row-" + result.id + "'>";
      for (i in this.registrations.rows) {
        if (result.get("uuid") === this.registrations.rows[i].key) {
          regvalues = this.registrations.rows[i].value.replace(/[//]/g, '');
          regvalues = this.registrations.rows[i].value.replace(/[//]/g, '');
          isRegExist = true;
          try {
            regvals = jQuery.parseJSON(regvalues);
            html += "<td>" + regvals.Fecha + "</td>";
            html += "<td>" + regvals.Nombre + "</td>";
            html += "<td>" + regvals.Apellido + "</td>";
            html += "<td>" + regvals.Apodo + "</td>";
            html += "<td>" + regvals.Calleynumero + "</td>";
            html += "<td>" + regvals.Provincia + "</td>";
            html += "<td>" + regvals.Municipio + "</td>";
            html += "<td>" + regvals.BarrioComunidad + "</td>";
            break;
          } catch (_error) {
            e = _error;
            isRegExist = false;
            break;
          }
        }
      }
      if (isRegExist === false) {
        html += "</tr>";
        continue;
      }
      isRegExist = false;
      this.searchRows[result.id] = "";
      _ref4 = this.fields;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        field = _ref4[_l];
        html += "<td>" + (result.get(field)) + "</td>";
        this.searchRows[result.id] += result.get(field);
      }
      html += "</tr>";
    }
    "</tbody></table></div>";
    this.$el.html(html);
    return $("table").each(function() {
      var $table, blob, data, url;
      $table = $(this);
      data = $table.table2CSV({
        delivery: "value",
        header: headers
      });
      blob = new Blob([data], {
        type: "application/octet-binary"
      });
      url = URL.createObjectURL(blob);
      $("<a><font size=\"2px\">Exportar a CSV</font></a>").attr("id", "downloadFile").attr({
        href: url
      }).attr("download", "report.csv").insertBefore($table);
      return $('table tr').each(function(index, row) {
        if (index % 2 === 1) {
          return $(row).addClass("odd");
        }
      });
    });
  };

  return RegSurveyReportView;

})(Backbone.View);

/*
//@ sourceMappingURL=RegSurveyReportView.map
*/
