// Generated by CoffeeScript 1.6.3
var QuestionView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

QuestionView = (function(_super) {
  var _this = this;

  __extends(QuestionView, _super);

  function QuestionView() {
    this.duplicateNone = __bind(this.duplicateNone, this);
    this.duplicateAbort = __bind(this.duplicateAbort, this);
    this.duplicateUpdate = __bind(this.duplicateUpdate, this);
    this.onChange = __bind(this.onChange, this);
    this.updateHeightDoc = __bind(this.updateHeightDoc, this);
    this.saveNewDoc = __bind(this.saveNewDoc, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    _ref = QuestionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  QuestionView.prototype.el = "#content";

  QuestionView.prototype.events = {
    "change #question-view input": "onChange",
    "change #question-view select": "onChange",
    "change #question-view textarea": "onChange",
    "click button.repeat": "repeat",
    "click #question-view a:contains(Get current location)": "getLocation",
    "click .next_error": "runValidate",
    "click .validate_one": "onValidateOne",
    "click .duplicate_update": "duplicateUpdate",
    "click .duplicate_abordt": "duplicateAbort",
    "click .duplicate_none": "duplicateNone",
    "click .remove_repeat": "removeRepeat"
  };

  QuestionView.prototype.initialize = function(options) {
    var key, value;
    for (key in options) {
      value = options[key];
      this[key] = value;
    }
    if (Coconut.resultCollection == null) {
      Coconut.resultCollection = new ResultCollection();
    }
    this.autoscrollTimer = 0;
    return window.duplicateLabels = ['Apellido', 'Nombre', 'BarrioComunidad', 'Sexo'];
  };

  QuestionView.prototype.render = function() {
    var key, questionsName, skipperList, standard_value_table, surveyName, value,
      _this = this;
    window.skipLogicCache = {};
    if ("module" !== Coconut.config.local.get("mode")) {
      questionsName = "<h1>" + this.model.id + "</h1>";
    }
    if ('module' === Coconut.config.local.get('mode')) {
      standard_value_table = "      " + (((function() {
        var _ref1, _results;
        _ref1 = this.standard_values;
        _results = [];
        for (key in _ref1) {
          value = _ref1[key];
          _results.push("<input type='hidden' name='" + key + "' value='" + value + "'>");
        }
        return _results;
      }).call(this)).join('')) + "      ";
    }
    this.$el.html("      " + (standard_value_table || '') + "      <div style='position:fixed; right:5px; color:white; background-color: #333; padding:20px; display:none; z-index:10: font-size:1.5em !important;' id='messageText'>        Saving...      </div>      " + (questionsName || '') + "      <div id='question-view'>          " + (this.toHTMLForm(this.model)) + "      </div>    ");
    this.updateCache();
    this.updateSkipLogic();
    skipperList = [];
    $(this.model.get("questions")).each(function(index, question) {
      if (question.actionOnChange().match(/skip/i)) {
        skipperList.push(question.safeLabel());
      }
      if (question.actionOnQuestionsLoaded() !== "") {
        return CoffeeScript["eval"](question.actionOnQuestionsLoaded());
      }
    });
    this.triggerChangeIn(skipperList);
    this.jQueryUIze(this.$el);
    _.each($("input[type='autocomplete from list'],input[type='autocomplete from previous entries']"), function(element) {
      var minLength, source;
      element = $(element);
      if (element.attr("type") === 'autocomplete from list') {
        source = element.attr("data-autocomplete-options").replace(/\n|\t/, "").split(/, */);
        minLength = 0;
      } else {
        source = document.location.pathname.substring(0, document.location.pathname.indexOf("index.html")) + ("_list/values/byValue?key=\"" + (element.attr("name")) + "\"");
        minLength = 1;
      }
      return element.autocomplete({
        source: source,
        minLength: minLength,
        target: "#" + (element.attr("id")) + "-suggestions",
        callback: function(event) {
          element.val($(event.currentTarget).text());
          return element.autocomplete('clear');
        }
      });
    });
    if (this.readonly) {
      $('input, textarea').attr("readonly", "true");
    }
    this.updateHeightDoc();
    this.addUuid();
    surveyName = window.Coconut.questionView.model.id;
    if (surveyName === "Participant Registration-es") {
      this.updateLocations();
    }
    return this.trigger("rendered");
  };

  QuestionView.prototype.jQueryUIze = function($obj) {
    $obj.find("input[type=text],input[type=number],input[type='autocomplete from previous entries'],input[type='autocomplete from list']").textinput();
    $obj.find('input[type=radio],input[type=checkbox]').checkboxradio();
    $obj.find('ul').listview();
    $obj.find('select').selectmenu();
    return $obj.find('a').button();
  };

  QuestionView.prototype.addUuid = function() {
    var c;
    if (window.questionCache['uuid']) {
      c = new C32();
      c.getRandom(8);
      c.addChecksum();
      return window.questionCache['uuid'].find("input").val(c.value);
    }
  };

  QuestionView.prototype.triggerChangeIn = function(names) {
    var elements, name, _i, _len, _results,
      _this = this;
    _results = [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      elements = [];
      elements.push(window.questionCache[name].find("input, select, textarea"));
      _results.push($(elements).each(function(index, element) {
        var event;
        event = {
          target: element
        };
        return _this.actionOnChange(event);
      }));
    }
    return _results;
  };

  QuestionView.prototype.saveNewDoc = function(doc) {
    var newHeight;
    newHeight = document.body.scrollHeight;
    doc['height'] = newHeight;
    return $.couch.db("coconut").saveDoc(doc);
  };

  QuestionView.prototype.updateHeightDoc = function() {
    var heightDocId,
      _this = this;
    heightDocId = "" + this.model.id + "-height";
    return $.couch.db("coconut").openDoc(heightDocId, {
      success: function(doc) {
        return _this.saveNewDoc(doc);
      },
      error: function(doc) {
        return _this.saveNewDoc({
          "_id": heightDocId
        });
      }
    });
  };

  QuestionView.prototype.runValidate = function() {
    return this.validateAll();
  };

  QuestionView.prototype.onChange = function(event) {
    var $target, e, geographyRelevant, messageVisible, surveyName, targetName, warningShowing, wasValid;
    event.stopPropagation();
    event.stopImmediatePropagation();
    $target = $(event.target);
    targetName = $target.attr("name");
    if (targetName === "Completado") {
      console.log("handling complete button onChange");
      if (this.changedComplete) {
        this.changedComplete = false;
        return;
      }
      this.validateAll();
    } else {
      this.changedComplete = false;
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
      warningShowing = window.questionCache[targetName].find(".message .warning").length !== 0;
      if (!(messageVisible && !warningShowing)) {
        wasValid = this.validateOne({
          key: targetName,
          autoscroll: false,
          button: "<button type='button' data-name='" + targetName + "' class='validate_one'>Revisar</button>"
        });
      }
    }
    this.save();
    this.updateSkipLogic();
    this.actionOnChange(event);
    try {
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
    } catch (_error) {
      e = _error;
      messageVisible = false;
    }
    if (wasValid && !messageVisible) {
      this.autoscroll(event);
    }
    surveyName = window.Coconut.questionView.model.id;
    if (surveyName === "Participant Registration-es" && __indexOf.call(window.duplicateLabels, targetName) >= 0) {
      this.duplicateCheck();
    }
    geographyRelevant = ["Provincia", "Municipio", "BarrioComunidad"].indexOf(targetName) !== -1;
    if (surveyName === "Participant Registration-es" && geographyRelevant) {
      return this.updateLocations();
    }
  };

  QuestionView.prototype.updateLocations = function() {
    console.log("updating locations");
    return _.delay(function() {
      var $city, $hood, $province, CITY, HOOD, PROVINCE, cities, geography, hoods, location, provinces, todo, _i, _len;
      PROVINCE = 0;
      CITY = 1;
      HOOD = 2;
      geography = [["SANTO DOMINGO", "SANTO DOMINGO ESTE", "VILLA DUARTE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA NORTE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA SUR"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "SANS SOUCI"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MAMEYES"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "INVIVIENDA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS TRES OJOS"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "MENDOZA "], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "HAINAMOSA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "SAN ISIDRO ADENTRO"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS FRAILES"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA VIEJO"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LA BARQUITA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "EL DIQUE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "BRISAS DEL OZAMA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LAS CAOBAS"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "BUENOS AIRES DE HERRERA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "MANOGUAYABO"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "BAYONA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "EL CAFÉ"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LOYOLA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LAS PALMAS DE HERRERA"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "LAS MERCEDES"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "LOS LIBERTADORES"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "ALTOS DE CHAVON"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "BARRIO LANDIA"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "ZONA FRANCA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "VILLA MELLA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "SABANA PERDIDA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "GUARICANO"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "LOS CASABES"], ["SANTO DOMINGO", "LA VICTORIA (DM)", "LA VICTORIA"], ["SANTO DOMINGO", "BOCA CHICA", "ANDRES"], ["SANTO DOMINGO", "BOCA CHICA", "LOS COQUITOS"], ["SANTO DOMINGO", "BOCA CHICA", "LA COCA"], ["SANTO DOMINGO", "BOCA CHICA", "BELLA VISTA"], ["SANTO DOMINGO", "BOCA CHICA", "ALTOS DE CHAVON"], ["SANTO DOMINGO", "BOCA CHICA", "LA CUEVA DEL HUMO"], ["SANTO DOMINGO", "BOCA CHICA", "MONTE REY"], ["SANTO DOMINGO", "BOCA CHICA-LA MALENA", "LA MALENA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "LA CIEN MIL - LA PIEDRA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "EL HIGO"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "CAMPO LINDO"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "LA CALETA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "VALIENTE"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "MONTE ADENTRO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MARIA ESTELA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "EL BRISAL"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MIRAMAR"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "ENSANCHE PROGRESO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BRISAS CAUCEDO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BARRIO AZUL"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LOS TANQUECITOS"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LA BOBINA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "FINCA VIGIA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LOS COCOS"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MI PROGRESO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BRISAS DEL NORTE (LOS BOTAOS)"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LA ZURZA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLAS AGRÍCOLAS"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLA JUANA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "24 DE ABRIL"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "MEJORAMIENTO SOCIAL"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLA FRANCISCA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "DOMINGO SAVIO"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "GUALEY"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "SIMON BOLIVAR"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "CAPOTILLO"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LA CIENAGA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LOS GUANDULES"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LAS CAŇITAS"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "GUACHUPITA"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "JUAN PABLO DUARTE"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "CENTRO DEL PUEBLO"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "INVI"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "PIEDRA BLANCA"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "LOS GRINGOS"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "EL CENTRO"], ["MONSEÑOR NOUEL", "BONAO", "BARRIO PARAISO"], ["MONSEÑOR NOUEL", "BONAO", "SANTA ANA"], ["MONSEÑOR NOUEL", "BONAO", "BRISAS DEL YUNA"], ["MONSEÑOR NOUEL", "BONAO", "VILLA LIBERACION"], ["MONSEÑOR NOUEL", "BONAO", "VILLA PROGRESO"], ["DUARTE", "SAN FCO DE MACORIS", "VISTA DEL VALLE"], ["DUARTE", "SAN FCO DE MACORIS", "CENTRO DE LA CIUDAD-'B'"], ["DUARTE", "SAN FCO DE MACORIS", "EL CIRUELILLO"], ["DUARTE", "SAN FCO DE MACORIS", "RIVERA DEL JAYA"], ["DUARTE", "SAN FCO DE MACORIS", "LOS JARDINES"], ["DUARTE", "SAN FCO DE MACORIS", "LOS PISA COSTURA"], ["DUARTE", "SAN FCO DE MACORIS", "BUENOS AIRES"], ["DUARTE", "SAN FCO DE MACORIS", "SAN VICENTE DE PAUL"], ["DUARTE", "SAN FCO DE MACORIS", "SAN MARTIN DE PORRES"], ["DUARTE", "SAN FCO DE MACORIS", "EL CAPACITO"], ["DUARTE", "SAN FCO DE MACORIS", "EL HORMIGUERO"], ["DUARTE", "SAN FCO DE MACORIS", "ERCILIA PEPIN"], ["DUARTE", "SAN FCO DE MACORIS", "EL MADRIGAL"], ["DUARTE", "SAN FCO DE MACORIS", "LOS GRULLON"], ["DUARTE", "SAN FCO DE MACORIS", "UGAMBA"], ["DUARTE", "SAN FCO DE MACORIS", "LOS ESPINOLA"], ["DUARTE", "SAN FCO DE MACORIS", "SANTA ANA"], ["DUARTE", "SAN FCO DE MACORIS", "RABO DE CHIVO"], ["DUARTE", "SAN FCO DE MACORIS", "PUEBLO NUEVO"], ["DUARTE", "SAN FCO DE MACORIS", "LOS RIELES ABAJO"], ["DUARTE", "SAN FCO DE MACORIS", "24 DE ABRIL"], ["DUARTE", "SAN FCO DE MACORIS", "LA ALTAGRACIA"], ["DUARTE", "SAN FCO DE MACORIS", "CRISTO REY"], ["DUARTE", "SAN FCO DE MACORIS", "LAS CAOBAS"], ["DUARTE", "SAN FCO DE MACORIS", "27 DE FEBRERO"], ["DUARTE", "SAN FCO DE MACORIS", "SAN PEDRO"], ["DUARTE", "SAN FCO DE MACORIS", "VILLA VERDE"], ["DUARTE", "SAN FCO DE MACORIS", "BARRIO AZUL"], ["DUARTE", "SAN FCO DE MACORIS", "AGUAYO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "HAITI"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS COQUITOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "EL JAVILLAR"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "NUEVO RENACER"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PLAYA OESTE"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS COCOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PADRE GRANERO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PADRE LAS CASAS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "VILLA PROGRESO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS BORDAS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "SAN MARCOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "CRISTO REY"], ["PUERTO PLATA", "IMBERT", "CENTRO DEL PUEBLO"], ["PUERTO PLATA", "IMBERT", "PROYECTO"], ["PUERTO PLATA", "LUPERON", "LUPERON"], ["PUERTO PLATA", "LUPERON", "LOS BELLOSOS"], ["PUERTO PLATA", "LUPERON", "LOS RAMONES"], ["PUERTO PLATA", "SOSUA", "SAN ANTONIO"], ["PUERTO PLATA", "SOSUA", "LOS CHARAMICOS"], ["PUERTO PLATA", "SOSUA", "EL BATEY"], ["PUERTO PLATA", "SOSUA", "SOSUA ABAJO"], ["PUERTO PLATA", "SOSUA", "MARANATHA"], ["PUERTO PLATA", "SOSUA", "LOS CASTILLOS"], ["PUERTO PLATA", "CABARETE", "CABARETE"], ["PUERTO PLATA", "CABARETE", "CALLEJON DE LA LOMA"], ["PUERTO PLATA", "CABARETE", "CALLEJON DEL BLANCO"], ["PUERTO PLATA", "CABARETE", "BOMBITA"], ["PUERTO PLATA", "CABARETE", "LAS CIENAGAS"], ["PUERTO PLATA", "MONTELLANO", "LOS CIRUELOS"], ["PUERTO PLATA", "MONTELLANO", "PANCHO MATEO"], ["PUERTO PLATA", "MONTELLANO", "EL TAMARINDO"], ["PUERTO PLATA", "MONTELLANO", "SEBERET"], ["PUERTO PLATA", "MONTELLANO", "LOS CARTONES"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "EL CERRO"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "CENTRO DEL PUEBLO"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "LOS CANDELONES"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "DUARTE"], ["SANTIAGO", "LICEY AL MEDIO", "LICEY AL MEDIO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GUAYABAL AL MEDIO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "PUÑAL ADENTRO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "CIENFUEGOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "MONTE RICO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS SALADOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ALTOS DE VIREYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ESPAILLAT"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BERMUDEZ"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA OTRA BANDA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BARACOA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA JOYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BELLA VISTA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA YAGUITA DE PASTOR"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS JAZMINES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "NIBAJE"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS PEPINES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BUENOS AIRES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "HATO DEL YAQUE"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "CAMBOYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS CIRUELITOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "EL HOYO DE LIA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA CANELA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "PEKIN"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ARROYO HONDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "TAMBORIL"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GURABO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "SABANA IGLESIA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "EL EJIDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ENSANCHE HERMANAS MIRABAL"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS PLATANITOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GURABITO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BARRIO LINDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA HERREDURA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "HATO MAYOR"]];
      $province = questionCache.Provincia.find("input");
      $city = questionCache.Municipio.find("input");
      $hood = questionCache.BarrioComunidad.find("input");
      provinces = [];
      cities = [];
      hoods = [];
      for (_i = 0, _len = geography.length; _i < _len; _i++) {
        location = geography[_i];
        if (!~provinces.indexOf(location[PROVINCE])) {
          provinces.push(location[PROVINCE]);
        }
        if ($province.val().toLowerCase() === location[PROVINCE].toLowerCase()) {
          if (!~cities.indexOf(location[CITY])) {
            cities.push(location[CITY]);
          }
        }
        if ($city.val().toLowerCase() === location[CITY].toLowerCase()) {
          if (!~hoods.indexOf(location[HOOD])) {
            hoods.push(location[HOOD]);
          }
        }
      }
      todo = [[$province, provinces], [$city, cities], [$hood, hoods]];
      return $(todo).each(function(index, data) {
        var element, list;
        element = data[0];
        list = data[1];
        console.log(element);
        console.log(list);
        return element.autocomplete({
          source: list,
          minLength: 1,
          target: "#" + (element.attr("id")) + "-suggestions",
          callback: function(event) {
            element.val($(event.currentTarget).text());
            return element.autocomplete('clear');
          }
        });
      });
    }, 1000);
  };

  QuestionView.prototype.duplicateCheck = function(event) {
    var community, count, family, key, label, names, sexo, spacePattern, _base, _i, _len, _ref1;
    count = 0;
    window.Coconut.duplicates = [];
    _ref1 = window.duplicateLabels;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      label = _ref1[_i];
      if (typeof (_base = window.getValueCache)[label] === "function" ? _base[label]() : void 0) {
        count++;
      }
    }
    spacePattern = new RegExp(" ", "g");
    family = (window.getValueCache['Apellido']() || '').toLowerCase().replace(spacePattern, '');
    names = (window.getValueCache['Nombre']() || '').toLowerCase().replace(spacePattern, '');
    community = (window.getValueCache['BarrioComunidad']() || '').toLowerCase().replace(spacePattern, '');
    sexo = (window.getValueCache['Sexo']() || '').toLowerCase().replace(spacePattern, '');
    key = [family, names, community, sexo].join(":");
    if (~key.indexOf("::")) {
      return;
    }
    window.Coconut.duplicateKeys = {};
    return $.couch.db("coconut").view("coconut/duplicateCheck", {
      keys: [key],
      success: function(data) {
        var html, i, ignoredKeys, row, value, _j, _len1, _ref2, _ref3;
        ignoredKeys = "_rev _id question collection".split(" ");
        if (data.rows.length === 0) {
          return;
        }
        if ($("#duplicates").length === 0) {
          $("#content").append("<div id='duplicates'></div>");
        }
        alert("Duplicados posibles detectado");
        html = "<br><br>          <h1>Duplicados posibles</h1>        ";
        _ref2 = data.rows;
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          row = _ref2[i];
          window.Coconut.duplicateKeys[row.key] = true;
          window.Coconut.duplicates[i] = row.value;
          html += "            <h2>Posibilidad " + (i + 1) + "</h2>            <table style='font-size: 1.4em;'>              <tr>          ";
          _ref3 = row.value;
          for (key in _ref3) {
            value = _ref3[key];
            if ((value != null) && !~ignoredKeys.indexOf(key)) {
              html += "<tr><th style='text-align:left;'>" + key + "</th><td>" + value + "</td></tr>";
            }
          }
          html += "              </tr>              <tr>                <td colspan='2' style='font-size:1.5em; padding:1em;'>                  Si esta persona es una duplicada,<br>                  <button class='duplicate_update' data-index='" + i + "'>Usar esta informaci&oacute;n y actualizar</button><br>                  <button class='duplicate_abort' data-index='" + i + "'>Abortar corriente impreso</button>                </td>              </tr>            </table>          ";
        }
        html += "          <button class='duplicate_none'>No hay duplicados. Clarar.</button>        ";
        $("#duplicates").html(html);
        return $("#duplicates").scrollTo();
      }
    });
  };

  QuestionView.prototype.duplicateUpdate = function(event) {
    var index;
    event.stopImmediatePropagation();
    if (confirm("Reemplazar corriente información con esta?")) {
      index = parseInt($(event.target).attr("data-index"));
      js2form($('#question-view').get(0), window.Coconut.duplicates[index]);
      return $("#duplicates").empty();
    }
  };

  QuestionView.prototype.duplicateAbort = function(event) {
    event.stopImmediatePropagation();
    if (confirm("¿Está seguro?\n\nEste acción caminará un impreso nuevo.")) {
      return window.location.reload();
    }
  };

  QuestionView.prototype.duplicateNone = function() {
    return $("#duplicates").empty();
  };

  QuestionView.prototype.onValidateOne = function(event) {
    var $target, name;
    $target = $(event.target);
    name = $(event.target).attr('data-name');
    return this.validateOne({
      key: name,
      autoscroll: true,
      leaveMessage: false,
      button: "<button type='button' data-name='" + name + "' class='validate_one'>Revisar</button>"
    });
  };

  QuestionView.prototype.validateAll = function() {
    var $button, aPassed, completeButtonModel, hasOnComplete, html, isValid, key, link, onClick, onComplete, questionIsntValid, sPassed, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
    $button = $("[name=Completado]");
    isValid = true;
    _ref1 = window.keyCache;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      key = _ref1[_i];
      questionIsntValid = !this.validateOne({
        key: key,
        autoscroll: isValid,
        leaveMessage: false
      });
      if (isValid && questionIsntValid) {
        isValid = false;
      }
    }
    console.log("I am telling the complete button that we are valid " + isValid);
    this.completeButton(isValid);
    completeButtonModel = _(Coconut.questionView.model.get("questions")).filter(function(a) {
      return a.get("label") === "Completado";
    })[0];
    hasOnComplete = completeButtonModel.has("onComplete");
    if (hasOnComplete) {
      onComplete = completeButtonModel.get("onComplete");
    }
    if (hasOnComplete) {
      console.log("onComplete");
      console.log(onComplete);
      switch (onComplete.type) {
        case "redirect":
          if (onComplete.route != null) {
            Coconut.router.navigate(onComplete.route, true);
          }
          break;
        case "choice":
          if ((onComplete.message != null) && (onComplete.links != null)) {
            html = "<p>" + onComplete.message + "</p>";
            _ref2 = onComplete.links;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              link = _ref2[_j];
              if (link.pass != null) {
                aPassed = [];
                _ref3 = link.pass;
                for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                  key = _ref3[_k];
                  aPassed.push("" + key + "=" + (window.getValueCache[key]()));
                }
                sPassed = "/" + aPassed.join("&");
              }
              onClick = '';
              if ((link.pass == null) && ~window.location.href.indexOf(link.route)) {
                onClick = 'onClick=\"document.location.reload();\"';
              }
              html += "<button><a href='#" + link.route + (sPassed || '') + "' " + onClick + ">" + link.label + "</a></button>";
            }
            if ($(".onComplete").length === 0) {
              $button.after("<div class='onComplete'>" + html + "</div>");
            }
          }
      }
    }
    if (isValid) {
      $button.scrollTo();
    }
    return isValid;
  };

  QuestionView.prototype.validateOne = function(options) {
    var $message, $question, autoscroll, button, e, key, leaveMessage, message, warning;
    key = options.key || '';
    autoscroll = options.autoscroll || false;
    button = options.button || "<button type='button' class='next_error'>Siguiente Error</button>";
    leaveMessage = options.leaveMessage || false;
    $question = window.questionCache[key];
    $message = $question.find(".message");
    if (key === 'Completado') {
      return '';
    }
    if ($question.hasClass("group")) {
      return '';
    }
    try {
      message = this.isValid(key);
    } catch (_error) {
      e = _error;
      alert("isValid error in " + key + "\n" + e);
      message = "";
    }
    if ($message.is(":visible") && leaveMessage) {
      if (message === "") {
        return true;
      } else {
        return false;
      }
    }
    warning = this.getWarning(key);
    if (message === "" && warning === "") {
      $message.hide();
      if (autoscroll) {
        this.autoscroll($question);
      }
      return true;
    } else if (message === "" && warning !== "") {
      warning = "<span class='warning'>" + warning + "</span>";
      $message.show().html(warning);
      return true;
    } else if (message !== "" && warning === "") {
      $message.show().html("        " + message + "        " + button + "      ").find("button").button();
      return false;
    } else {
      warning = "<span class='warning'>" + warning + "</span>";
      $message.show().html("        " + message + "        " + warning + "        " + button + "      ").find("button").button();
      return false;
    }
  };

  QuestionView.prototype.isValid = function(question_id) {
    var error, labelText, question, questionWrapper, required, result, type, validation, validationFunctionResult, value, _ref1;
    if (!question_id) {
      return;
    }
    result = [];
    questionWrapper = window.questionCache[question_id];
    if (questionWrapper.hasClass("label")) {
      return "";
    }
    question = $("[name='" + question_id + "']", questionWrapper);
    type = $(questionWrapper.find("input").get(0)).attr("type");
    labelText = type === "radio" ? $("label[for=" + (question.attr("id").split("-")[0]) + "]", questionWrapper).text() || "" : (_ref1 = $("label[for=" + (question.attr("id")) + "]", questionWrapper)) != null ? _ref1.text() : void 0;
    required = questionWrapper.attr("data-required") === "true";
    if (type === "checkbox") {
      required = false;
    }
    validation = unescape(questionWrapper.attr("data-validation"));
    if (validation === "undefined") {
      validation = null;
    }
    value = window.getValueCache[question_id]();
    if (!questionWrapper.is(":visible")) {
      return "";
    }
    if (question.find("input").length !== 0 && (type === "checkbox" || type === "radio")) {
      return "";
    }
    if (required && (value === "" || value === null)) {
      result.push("'" + labelText + "' se requiere.");
    }
    if ((validation != null) && validation !== "") {
      try {
        validationFunctionResult = (CoffeeScript["eval"]("(value) -> " + validation, {
          bare: true
        }))(value);
        if (validationFunctionResult != null) {
          result.push(validationFunctionResult);
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Validation error for " + question_id + " with value " + value + ": " + error);
      }
    }
    if (result.length !== 0) {
      return result.join("<br>") + "<br>";
    }
    return "";
  };

  QuestionView.prototype.getWarning = function(question_id) {
    var error, question, questionWrapper, value, warningCode, warningFunctionResult;
    value = window.getValueCache[question_id]();
    questionWrapper = window.questionCache[question_id];
    question = $("[name='" + question_id + "']", questionWrapper);
    warningCode = unescape(questionWrapper.attr("data-warning"));
    if ((warningCode != null) && warningCode !== "") {
      try {
        warningFunctionResult = (CoffeeScript["eval"]("(value) -> " + warningCode, {
          bare: true
        }))(value);
        if (warningFunctionResult != null) {
          return warningFunctionResult;
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Custom warning error for " + question_id + " with value " + value + ": " + error);
      }
    }
    return '';
  };

  QuestionView.prototype.autoscroll = function(event) {
    var $div, $oldNext, $parentsMaybe, $target, count, name, _results,
      _this = this;
    clearTimeout(this.autoscrollTimer);
    if (event.jquery) {
      $div = event;
      name = $div.attr("data-question-name");
    } else {
      $target = $(event.target);
      name = $target.attr("name");
      $div = window.questionCache[name];
    }
    if ($div.hasClass("checkbox")) {
      return;
    }
    $oldNext = $div;
    this.$next = $div.next(".question");
    if (this.$next.length === 0) {
      $parentsMaybe = $oldNext.parent().next(".question");
      if ($parentsMaybe.length !== 0) {
        this.$next = $parentsMaybe;
      }
    }
    count = 0;
    if (!this.$next.is(":visible")) {
      _results = [];
      while ((!this.$next.is(":visible")) || this.$next.length !== 0) {
        count++;
        $oldNext = $(this.$next);
        this.$next = this.$next.next(".question");
        if (count > 100) {
          break;
        }
        if (this.$next.length === 0) {
          $parentsMaybe = $oldNext.parent().next(".question");
          if ($parentsMaybe.length !== 0) {
            _results.push(this.$next = $parentsMaybe);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      $(window).on("scroll", function() {
        $(window).off("scroll");
        return clearTimeout(_this.autoscrollTimer);
      });
      return this.autoscrollTimer = setTimeout(function() {
        $(window).off("scroll");
        return _this.$next.scrollTo().find("input[type=text],input[type=number],input[type='autocomplete from previous entries'], input=[type='autocomplete from list']").first().focus();
      }, 1000);
    }
  };

  QuestionView.prototype.actionOnChange = function(event) {
    var $divQuestion, $target, code, error, message, name, newFunction, nodeName, value;
    nodeName = $(event.target).get(0).nodeName;
    $target = nodeName === "INPUT" || nodeName === "SELECT" || nodeName === "TEXTAREA" ? $(event.target) : $(event.target).parent().parent().parent().find("input,textarea,select");
    name = $target.attr("name");
    $divQuestion = $(".question [data-question-name='" + name + "']");
    code = $divQuestion.attr("data-action_on_change");
    try {
      value = ResultOfQuestion(name);
    } catch (_error) {
      error = _error;
      if (error === "invisible reference") {
        return;
      }
    }
    if (code === "" || (code == null)) {
      return;
    }
    code = "(value) -> " + code;
    try {
      newFunction = CoffeeScript["eval"].apply(this, [code]);
      return newFunction(value);
    } catch (_error) {
      error = _error;
      name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
      message = error.message;
      return alert("Action on change error in question " + ($divQuestion.attr('data-question-id') || $divQuestion.attr("id")) + "\n\n" + name + "\n\n" + message);
    }
  };

  QuestionView.prototype.updateSkipLogic = function() {
    var $question, error, message, name, result, skipLogicCode, _ref1, _results;
    _ref1 = window.questionCache;
    _results = [];
    for (name in _ref1) {
      $question = _ref1[name];
      skipLogicCode = window.skipLogicCache[name];
      if (skipLogicCode === "" || (skipLogicCode == null)) {
        continue;
      }
      try {
        result = eval(skipLogicCode);
      } catch (_error) {
        error = _error;
        if (error === "invisible reference") {
          result = true;
        } else {
          name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
          message = error.message;
          alert("Skip logic error in question " + ($question.attr('data-question-id')) + "\n\n" + name + "\n\n" + message);
        }
      }
      if (result) {
        _results.push($question[0].style.display = "none");
      } else {
        _results.push($question[0].style.display = "");
      }
    }
    return _results;
  };

  QuestionView.prototype.save = _.throttle(function() {
    var currentData;
    currentData = $('#question-view').toObject({
      skipEmpty: false
    });
    currentData.lastModifiedAt = moment(new Date()).format(Coconut.config.get("datetime_format"));
    currentData.savedBy = $.cookie('current_user');
    return Coconut.questionView.result.save(currentData, {
      success: function() {
        return $("#messageText").slideDown().fadeOut();
      }
    });
  }, 1000, {
    trailing: false
  });

  QuestionView.prototype.completeButton = function(value) {
    console.log("complete button util: " + value);
    this.changedComplete = true;
    if ($('[name=Completado]').prop("checked") !== value) {
      return $('[name=Completado]').click();
    }
  };

  QuestionView.prototype.toHTMLForm = function(questions, groupId, isRepeatedGroup, index) {
    var html, titleIndex,
      _this = this;
    if (questions == null) {
      questions = this.model;
    }
    if (questions.length == null) {
      questions = [questions];
    }
    if (index == null) {
      index = 0;
    } else {
      if (isRepeatedGroup) {
        titleIndex = "<span class='title_index'>" + (index + 1) + "</span>";
      }
    }
    html = '';
    _(questions).each(function(question) {
      var groupTitle, isRepeatable, labelHeader, name, option, options, question_id, repeatButton, validation, warning;
      labelHeader = question.type() === "label" ? ["<h2>", "</h2>"] : ["", ""];
      if (question.has('warning')) {
        warning = "        data-warning='" + (_.escape(question.warning())) + "'      ";
      }
      if (question.has('validation')) {
        validation = "        data-validation='" + (_.escape(question.validation())) + "'      ";
      }
      isRepeatable = question.repeatable();
      if (isRepeatable) {
        repeatButton = "        <button class='repeat'>+</button>      ";
      }
      if (isRepeatable || isRepeatedGroup) {
        name = question.safeLabel() + ("[" + index + "]");
        question_id = question.get("id") + ("-" + index);
      } else {
        name = question.safeLabel();
        question_id = question.get("id");
      }
      window.skipLogicCache[name] = question.skipLogic() !== '' ? CoffeeScript.compile(question.skipLogic(), {
        bare: true
      }) : '';
      if (question.questions().length !== 0) {
        if (question.label() !== '' && question.label() !== question.get("_id")) {
          groupTitle = "<h1>" + (question.label()) + " " + (titleIndex || '') + "</h1>";
        }
        return html += "          <div             data-group-id='" + question_id + "'            data-question-name='" + name + "'            data-question-id='" + question_id + "'            class='question group'>            " + (groupTitle || '') + "            " + (_this.toHTMLForm(question.questions(), question_id, isRepeatable, index)) + "          </div>          " + (repeatButton || '') + "        ";
      } else {
        return html += "          <div            " + ((question.type() === 'hidden' ? "style='display:none;'" : void 0) || '') + "            class='question " + (question.type()) + "'            data-question-name='" + name + "'            data-question-id='" + question_id + "'            data-action_on_change='" + (_.escape(question.actionOnChange())) + "'            " + (validation || '') + "            " + (warning || '') + "            data-required='" + (question.required()) + "'          >          " + (question.type() !== 'hidden' ? "<label type='" + (question.type()) + "' for='" + question_id + "'>" + labelHeader[0] + (question.label()) + labelHeader[1] + " <span></span></label>" : "") + "          " + ("<p class='grey'>" + (question.hint()) + "</p>") + "          <div class='message'></div>          " + ((function() {
          var _i, _len, _ref1;
          switch (question.type()) {
            case "textarea":
              return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
            case "select":
              if (this.readonly) {
                return question.value();
              } else {
                html = "<select>";
                _ref1 = question.get("select-options").split(/, */);
                for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
                  option = _ref1[index];
                  html += "<option name='" + name + "' id='" + question_id + "-" + index + "' value='" + option + "'>" + option + "</option>";
                }
                return html += "</select>";
              }
              break;
            case "radio":
              if (this.readonly) {
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "'></input>";
              } else {
                options = question.get("radio-options");
                return _.map(options.split(/, */), function(option, index) {
                  return "                      <label for='" + question_id + "-" + index + "'>" + option + "</label>                      <input type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/>                    ";
                }).join("");
              }
              break;
            case "date":
              if (this.readonly) {
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "'>";
              } else {
                return "                    <br>                    <input type='date' name='" + name + "' id='" + question_id + "' class='ui-input-text' value='" + (_.escape(option)) + "'/>                  ";
              }
              break;
            case "checkbox":
              if (this.readonly) {
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
              } else {
                return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true'></input>";
              }
              break;
            case "autocomplete from list":
            case "autocomplete from previous entries":
              return "                  <!-- autocomplete='off' disables browser completion -->                  <input autocomplete='off' name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "' data-autocomplete-options='" + (question.get("autocomplete-options")) + "'></input>                  <ul id='" + question_id + "-suggestions' data-role='listview' data-inset='true'/>                ";
            case "location":
              return "                  <a data-question-id='" + question_id + "'>Get current location</a>                  <label for='" + question_id + "-description'>Location Description</label>                  <input type='text' name='" + name + "-description' id='" + question_id + "-description'></input>                  " + (_.map(["latitude", "longitude"], function(field) {
                return "<label for='" + question_id + "-" + field + "'>" + field + "</label><input readonly='readonly' type='number' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
              }).join("")) + "                  " + (_.map(["altitude", "accuracy", "altitudeAccuracy", "heading", "timestamp"], function(field) {
                return "<input type='hidden' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
              }).join("")) + "                ";
            case "image":
              return "<img style='" + (question.get("image-style")) + "' src='" + (question.get("image-path")) + "'/>";
            case "hidden":
              if (!this.readonly) {
                return "<input type='hidden' name='" + name + "' id='" + question_id + "'>";
              } else {
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'>";
              }
              break;
            case "label":
              return "";
            default:
              return "<input name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "'></input>";
          }
        }).call(_this)) + "          </div>          " + (repeatButton || '') + "        ";
      }
    });
    return html;
  };

  QuestionView.prototype.updateCache = function() {
    var $qC, accessorFunction, inputs, isCheckable, name, question, selects, type, _i, _len, _ref1;
    window.questionCache = {};
    window.getValueCache = {};
    window.$questions = $(".question");
    _ref1 = window.$questions;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      question = _ref1[_i];
      name = question.getAttribute("data-question-name");
      if (name === "Completado") {
        continue;
      }
      if (name === Coconut.questionView.model.safeLabel()) {
        continue;
      }
      if ((name != null) && name !== "") {
        accessorFunction = {};
        window.questionCache[name] = $(question);
        $qC = window.questionCache[name];
        selects = $("select[name='" + name + "']", $qC);
        if (selects.length === 0) {
          inputs = $("input[name='" + name + "']", $qC);
          if (inputs.length !== 0) {
            type = inputs[0].getAttribute("type");
            isCheckable = type === "radio" || type === "checkbox";
            if (isCheckable) {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input:checked", $qC).safeVal();
                };
              })(name, $qC);
            } else {
              if (type === "hidden") {
                (function(inputs) {
                  return accessorFunction = function() {
                    return inputs.val();
                  };
                })(inputs);
              } else {
                (function(inputs) {
                  return accessorFunction = function() {
                    return inputs.safeVal();
                  };
                })(inputs);
              }
            }
          } else {
            (function(name, $qC) {
              return accessorFunction = function() {
                return $(".textarea[name='" + name + "']", $qC).safeVal();
              };
            })(name, $qC);
          }
        } else {
          (function(selects) {
            return accessorFunction = function() {
              return selects.safeVal();
            };
          })(selects);
        }
        window.getValueCache[name] = accessorFunction;
      }
    }
    return window.keyCache = _.keys(questionCache);
  };

  QuestionView.prototype.currentKeyExistsInResultsFor = function(question) {
    var _this = this;
    return Coconut.resultCollection.any(function(result) {
      return _this.result.get(_this.key) === result.get(_this.key) && result.get('question') === question;
    });
  };

  QuestionView.prototype.repeat = function(event) {
    var $button, $el, $question, groupId, id, idSplit, index, isRepeatedGroup, question;
    event.stopImmediatePropagation();
    $button = $(event.target);
    $question = $button.prev(".question");
    idSplit = $question.attr("data-question-id").split("-");
    id = parseInt(_(idSplit).first());
    index = parseInt(_(idSplit).last());
    question = _(Coconut.questionView.model.questions()).where({
      "id": id
    })[0];
    groupId = '';
    isRepeatedGroup = true;
    $el = $(this.toHTMLForm(question, groupId, isRepeatedGroup, index + 1));
    $question.after($el);
    if ($el.find(".remove_repeat").length === 0) {
      $el.find(".question").last().append("<button class='remove_repeat'>Borrar</button><br>");
    }
    this.jQueryUIze($el);
    $button.remove();
    return Coconut.questionView.updateCache();
  };

  QuestionView.prototype.removeRepeat = function(event) {
    var $parent, i;
    $parent = $(event.target).parent();
    i = 0;
    while (!$parent.hasClass("group")) {
      if (i++ > 50) {
        break;
      }
      $parent = $parent.parent();
    }
    return $parent.remove();
  };

  QuestionView.prototype.getLocation = function(event) {
    var question_id,
      _this = this;
    question_id = $(event.target).closest("[data-question-id]").attr("data-question-id");
    $("#" + question_id + "-description").val("Retrieving position, please wait.");
    return navigator.geolocation.getCurrentPosition(function(geoposition) {
      _.each(geoposition.coords, function(value, key) {
        return $("#" + question_id + "-" + key).val(value);
      });
      $("#" + question_id + "-timestamp").val(moment(geoposition.timestamp).format(Coconut.config.get("datetime_format")));
      $("#" + question_id + "-description").val("Success");
      _this.save();
      return $.getJSON("http://api.geonames.org/findNearbyPlaceNameJSON?lat=" + geoposition.coords.latitude + "&lng=" + geoposition.coords.longitude + "&username=mikeymckay&callback=?", null, function(result) {
        $("#" + question_id + "-description").val(parseFloat(result.geonames[0].distance).toFixed(1) + " km from center of " + result.geonames[0].name);
        return _this.save();
      });
    }, function(error) {
      return $("#" + question_id + "-description").val("Error: " + error);
    }, {
      frequency: 1000,
      enableHighAccuracy: true,
      timeout: 30000,
      maximumAge: 0
    });
  };

  return QuestionView;

}).call(this, Backbone.View);

window.SkipTheseWhen = function(argQuestions, result) {
  var disabledClass, question, questions, _i, _j, _len, _len1, _results;
  questions = [];
  argQuestions = argQuestions.split(/\s*,\s*/);
  for (_i = 0, _len = argQuestions.length; _i < _len; _i++) {
    question = argQuestions[_i];
    questions.push(window.questionCache[question]);
  }
  disabledClass = "disabled_skipped";
  _results = [];
  for (_j = 0, _len1 = questions.length; _j < _len1; _j++) {
    question = questions[_j];
    if (result) {
      _results.push(question.addClass(disabledClass));
    } else {
      _results.push(question.removeClass(disabledClass));
    }
  }
  return _results;
};

window.ResultOfQuestion = function(name) {
  var _base;
  return (typeof (_base = window.getValueCache)[name] === "function" ? _base[name]() : void 0) || null;
};

//# sourceMappingURL=QuestionView.map
