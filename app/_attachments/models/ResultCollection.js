// Generated by CoffeeScript 1.6.3
var ResultCollection, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ResultCollection = (function(_super) {
  __extends(ResultCollection, _super);

  function ResultCollection() {
    _ref = ResultCollection.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ResultCollection.prototype.model = Result;

  ResultCollection.prototype.url = '/result';

  ResultCollection.prototype.db = {
    view: "resultsByQuestionAndComplete"
  };

  ResultCollection.prototype.fetch = function(options) {
    if (options == null) {
      options = {};
    }
    if (options.include_docs == null) {
      options.include_docs = true;
      options.descending = "true";
      if (options.complete === undefined || options.complete === "true") {
        options.startkey = options.question + ":" + "true" + ":z";
        options.endkey = options.question + ":" + "true";
      } else {
        options.startkey = options.question + ":" + "false" + ":z";
        options.endkey = options.question + ":" + "false";
      }
    }
    return ResultCollection.__super__.fetch.call(this, options);
  };

  ResultCollection.prototype.notSent = function() {
    return this.filter(function(result) {
      var _ref1;
      return !((_ref1 = result.get("sentTo")) != null ? _ref1.length : void 0);
    });
  };

  ResultCollection.prototype.filteredByQuestionCategorizedByStatus = function(questionType) {
    var returnObject;
    returnObject = {};
    returnObject.complete = [];
    returnObject.notCompete = [];
    this.each(function(result) {
      if (result.get("question") !== questionType) {
        return;
      }
      switch (result.get("complete")) {
        case true:
          return returnObject.complete.push(result);
        default:
          return returnObject.notComplete.push(result);
      }
    });
    return returnObject;
  };

  ResultCollection.prototype.filterByQuestionType = function(questionType) {
    return this.filter(function(result) {
      return result.get("question") === questionType;
    });
  };

  ResultCollection.prototype.partialResults = function(questionType) {
    return this.filter(function(result) {
      return result.get("question") === questionType && !result.complete();
    });
  };

  return ResultCollection;

})(Backbone.Collection);

/*
//@ sourceMappingURL=ResultCollection.map
*/
