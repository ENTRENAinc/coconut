<?php
/**
 * @file
 * A chron module to create custom tables and load data from CouchDb into these tables.
 */

error_reporting(E_ALL);
ini_set("display_errors", 1);





/**
 * Cron job is creating the queue cron job.
 *
 */
function ajetlsurveys_cron() {

    $queue = DrupalQueue::get('ajetlsurveys');
    $queue->createItem("arg1");
}

/**
 * Cron jobs info.
 *
 * @return array
 */
function ajetlsurveys_cron_queue_info()
{

    watchdog("ajetlsurveys", "INSIDE CRON QUEUE INFO");

    $queues = array();

    //cron is run at 2:00am
    //if(date('G')==2)
    //{
    $queues['ajetlsurveys'] = array(
        'worker callback' => 'load_surveys_worker',
        'time' => 60, // time in seconds, this is the duration that the job will be CALLED, e.g.
        // after it finish it will be called again until the time is up.
    );
    //}

    return $queues;
}


/**
 * The queue job worker. Query registration from couchDB descending and load them into mySQL database.
 *
 */
function load_surveys_worker()
{
    watchdog("ajetlsurveys", "load_surveys_worker JOB IS CALLED");
    global $base_url;

    // set module global variables
    setModuleVariables();

    $req_url = 'http://localhost:5984/coconut/_design/coconut/_view/resultsByQuestionAndComplete?startkey=%22Participant%20Survey-es%3Atrue%3Az%22&endkey=%22Participant%20Registration-es%3Atrue%22&descending=true&include_docs=false';

    //TBD Uncomment when deploying to prod, the $base_url is not write when deploying on Windows because it has /drupal in the link
    //$req_url = $base_url.':5984/coconut/_design/coconut/_view/resultsByQuestionAndComplete?startkey=%22Participant%20Registration-es%3Atrue%3Az%22&endkey=%22Participant%20Registration-es%3Atrue%22&descending=true&include_docs=false';

    watchdog("ajetlsurveys", 'URL:'.$req_url);


    // prepare the request options
    $req_options = array(
        'method' => 'GET',
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    // query couchdb data
    $couch_response = drupal_http_request( $req_url, $req_options );

    // decode to json objects
    $rows = drupal_json_decode( $couch_response->data)['rows'];

    $size = sizeof($rows);

    watchdog("ajetlsurveys", 'Rows fetched:'.$size);

    $i = 0;

    foreach ( $rows as $one_row ){
        list($type, $isCompleted, $lastModified1,$lastModified2, $lastModified3, $lastModified4) = explode(":", $one_row['key']);

        // lastModified is in format as 2014-08-11T13:50:41-03:00 so need to re-create
        $lastModified = $lastModified1.':'.$lastModified2.':'.$lastModified3.':'.$lastModified4;

        // check if the record with the same id and last modified date already exist
        $record = getSurveyByIdAndModifiedDate($one_row['id'], $lastModified);

        if ($record != null) {
           watchdog("ajetlsurveys", 'Found same exact record and stopped loading surveys.');
           break;
        }


        loadSurvey($one_row['id'], $lastModified);
        $i++;



        if ($i === 100)
            break;


    }

    deleteModuleVariables();
    watchdog("ajetlsurveys", 'Document processed'.$i);


}



/**
 * Implement hook_enable()
 */
function ajetlsurveys_enable() {
    //Check if table exists, if not install the schema.
    /* if(db_table_exists('aj_etlsurvey') == FALSE) {
         drupal_install_schema('ajetlsurveys');
     }*/


}


/**
 * Delete module variables.
 */
function deleteModuleVariables(){
    variable_del("ajSurveyColumns");
    variable_del("surveyColumnMap");
}

/**
 *
 * Use variable_set() to set module global variables.
 *
 *
 */
function setModuleVariables(){
    // retrieve aj-survey table columns
    $ajSurveyColumns = drupal_schema_fields_sql("aj_survey");
    // set the columns as variable
    variable_set("ajSurveyColumns", $ajSurveyColumns);

 /**
 * These is mapping for columns for column name - survey document key. We need that
 * because the column names were becoming too big. The mySQL limit is 64 characters but
 * it looks kind of ugly when they are so long.
 */
 $surveyColumnMap = array("81GInhalantes"=>"81GInhalantescomopegamentocementopinturaspray",
     "83Quéedadtenías"=>"83Quéedadteníaslaprimeravezquetuvisterelacionessexuales",
     "87ANoutilicéningún"=>"87ANoutilicéningúnmétodoparaprevenirelembarazo",
     "87ERitmoma"=>"87ERitmomantenerrelacionesendíasnofértilesocuandonohayovulación",
     "87FRetirod"=>"87FRetirodetenerlapenetraciónantesdeeyacular",
     "87IInyecci"=>"87IInyeccióncomoDepoProveraunparcheOrthoEvraounanillocomoNuvaRing",
     "87JImplant"=>"87JImplanteonorplantcomoImplanonoNexplanon",
     "15Cuálesel"=>"15Cuáleselniveleducativomásaltoquehasaprobado",
     "23Hassidos"=>"23Hassidosuspendidoadelaescuelaalgunavez",
     "25Hasreali"=>"25Hasrealizadoalgunavezuntrabajoporpagaoganancia",
     "15Cuálesel"=>"26Durantelaúltimasemanarealizastealgúntrabajoporpagaoganancia",
     "33Actualme"=>"33Actualmenterealizasalgúntrabajoenelquenosetepagaonorecibesganancia",
     "39Hasbusca"=>"39Hasbuscadounnuevoomejorempleoenelúltimomes",
     "40Hasparti"=>"40Hasparticipadoenalgúnprogramadedesarrollodeempleo",
     "41Conquéfr"=>"41Conquéfrecuenciatepreocupaservíctimadeladelincuenciaentubarrio",
     "44Entuopin"=>"42Conquéfrecuenciatepreocupaservíctimadeladelincuenciaentuescuelaouniversidad",
     "33Actualme"=>"44Entuopiniónladelincuenciaesunproblemagraveentubarrio",
     "45Tepreocu"=>"45Tepreocupalapresenciadepandillasentubarrio",
     "46Lapreocu"=>"46Lapreocupaciónporladelincuenciaocrimenteimpiderealizarlascosasquedeseashacerentubarrio",
     "48Hassidot"=>"48Hassidotransportadoenunapatrullapolicialporunaredadaoporsospechadelapolicíahaciati",
     "50Hassidod"=>"50HassidodetenidoporlaPolicíaacusadodecometeralgúndelito",
     "51Algunode"=>"51AlgunodetusamigoshasidodetenidoalgunavezporlaPolicía",
     "52Enlosúlt"=>"52Enlosúltimos12meseshastomadoalgodeunatiendasinpagarporella",
     "53Enlosúlt"=>"53Enlosúltimos12meseshasparticipadoenalgunapeleaoriña",
     "54Enlosúlt"=>"54Enlosúltimos12meseshasllevadouncuchillopuñalomachete",
     "55Enlosúlt"=>"55Enlosúltimos12meseshasllevadounarmadefuego",
     "56Enlosúlt"=>"56Enlosúltimos12meseshasvistoaalguienqueestabasiendoapuñaladocortadoobaleado",
     "57Enlosúlt"=>"57Enlosúltimos12mesesalguientehaamenazadoconuncuchilloounapistola",
     "58Enlosúlt"=>"58Enlosúltimos12mesesalguientehacortadooapuñaladotangravementequetuvistequeiraunmédico",
     "59Enlosúlt"=>"59Enlosúltimos12mesesalguientehadisparadoconunarmadefuego",
     "60Enlosúlt"=>"60Enlosúltimos12meseshasamenazadoaalguienconcortarleapuñalarleodispararle",
     "61Enlosúlt"=>"61Enlosúltimos12meseshasamenazadoaalguienconuncuchillooarma",
     "62Enlosúlt"=>"62Enlosúltimos12meseshascortadooapuñaladoaalguien",
     "63Enlosúlt"=>"63Enlosúltimos12meseslehasdisparadoaalguien",
     "64Enlosúlt"=>"64Enlosúltimos12meseshastenidoalgúnamigoomiembrodetufamiliaquelehandisparadocortadooapuñalado",
     "65Hasdañad"=>"65Hasdañadoodestruidoapropósitoartículosquenotepertenecen",
     "70Algunave"=>"70AlgunavezhasrobadoalgodeunatiendaoalgoquenotepertenecíaqueteníaunvalormenordeRD200",
     "71Algunave"=>"71AlgunavezharobadoalgodeunatiendaoalgoquenotepertenecíaqueteníaunvalormayordeRD200incluyendocarros",
     "73AActualm"=>"73AActualmenteestásinvolucradoenunapandilla",
     "74Comparte"=>"74Compartestiempooterelacionasconmiembrosdeunapandilla",
     "75Enlosúlt"=>"75Enlosúltimos12meseshashabladoocompartidoconalguienborrachoodrogado",
     "76AEnlosúl"=>"76Algunavezhastomadounabebidaalcohólicaunacopavasoenteronosólounsorbo",
     "76AEnlosúl"=>"76AEnlosúltimos12meseshasconsumidoalcohol",
     "76BEnlosúl"=>"76BEnlosúltimos12meseshastomadocincovasoscopasomásdebebidasalcohólicasenelmismodía",
     "77Hasproba"=>"77Hasprobadoalgunavezcualquieradeestasdrogasmarihuanacocaínaheroínapastillascrackcementoocualquierotracosaparadrogarse",
     "78Hasusado"=>"78Hasusadoenalgunaocasiónunaagujaparainyectartedroga",
     "85Concuánt"=>"85Concuántaspersonasdiferenteshastenidorelacionessexualesenlosúltimos12meses",
     "86Laúltima"=>"86Laúltimavezquetuvisterelacionessexualestuotucompañeroautilizóuncondón",
     "88Algunave"=>"88Algunavezalguientehaobligadoatenerrelacionessexuales",
     "89Algunave"=>"89Algunavezhastenidorelacionessexualespordinerobienescelularesviviendaetcoserviciosproteccióncomidaetc",
     "89ASilares"=>"89ASilarespuestaesafirmativaCuándofuelaúltimavez",
     "90Siquisie"=>"90Siquisierascompraruncondóncreesquepodríasencontrarlo",
     "91Siquisie"=>"91Siquisierastenersexocreesquepodriasconvenceratuparejadequeusecondónencasodequeélellaseniegueausarlo",
     "92Tesiente"=>"92Tesientescapazdetenerunaconversaciónabiertayhonestasobresexoconsuspadres",
     "93Algunave"=>"93Algunavezhastenidounaconversaciónabiertayhonestasobresexocontuspadres",
     "94Algunave"=>"94Algunavezalguientehaenseñadoohabladoacercadelasinfeccionesdetransmisiónsexual",
     "95Algunave"=>"95Algunavezlehanenseñadoacercadeprevencióndeembarazo",
     "75Enlosúlt"=>"96AlgunavezlehanenseñadoacercalainfecciónporVIHSida",
     "75Enlosúlt"=>"89ASilarespuestaesafirmativaCuándofuelaúltimavez"
  );

    variable_set("surveyColumnMap", $surveyColumnMap);
}
/**
 * Opens the document by Id and returns the JSON object.
 *
 * @param $id
 */
function openDocById($id){
    // TBD: changed hard coded localhost link
    $req_url = 'http://localhost:5984/coconut/'.$id;

    $req_options = array(
        'method' => 'GET',
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    $couch_response = drupal_http_request( $req_url, $req_options );
    $doc = drupal_json_decode( $couch_response->data);


    return $doc;

}

/**
 * Generates the first insert query e.g. .(col1, col2, col3...). It's driven by the aj_survey table columns.
 *
 * @param $doc
 *
 */
function genInsertQueryPart1($doc){
    $query = "";
    watchdog("ajetlsurveys", 'genInsertPart1Query');
    $ajSurveyColumns = variable_get("ajSurveyColumns");



    foreach ($ajSurveyColumns as $col){
        if ($col === "id" || $col === "changed")
            continue;

        $query = $query.$col.", ";


    }

    // clean the last ","
    $len = strlen($query);
    $query =substr($query, 0, $len-2);

    return $query;

}


/**
 * Generates the values() insert statement.
 *
 * @param $doc
 *
 */
function genInsertQueryPart2($doc){
    $query = "";
    $key = "";
    $val = "";
    watchdog("ajetlsurveys", 'genInsertPart1Query');
    $ajSurveyColumns = variable_get("ajSurveyColumns");


    $surveyColumnMap = variable_get("surveyColumnMap");

    foreach ($ajSurveyColumns as $col) {
        // skip these
        if ($col === "id" || $col === "changed")
            continue;

        if (array_key_exists($col, $ajSurveyColumns))
            $key = $ajSurveyColumns[$col];
        else
            $key = $col;

        if ($key === "createdAt" || $key === "lastModifiedAt") {
            $val = couchDateTime2Mysql($doc[$key]);
            $query = $query . $val . " ";
        }else if ($key === "created"){
            $val = " NOW() ";
            $query = $query . $val . " ";
        }else {
            if (array_key_exists($key, $doc))
                $val = $doc[$key];
            else
                $val = "";
            $query = $query . "'" . $val . "' ";
        }




         $query = $query.",";


    }

    // clean the last ","
    $len = strlen($query);
    $query =substr($query, 0, $len-1);

    return $query;

}


/**
 * Inserts data into aj_etlsurvey table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function insertSurvey($doc){

    watchdog("ajetlsurveys", 'Inside insertSurvey');

    $q1 = genInsertQueryPart1($doc);
    $q2 = genInsertQueryPart2($doc);
    $query = "INSERT INTO {aj_survey} (".$q1.") VALUES(".$q2.")";


    watchdog("ajetlsurveys", 'QUERY='.$query);

    $result = db_query($query);


}


/**
 * Inserts data into aj_etlsurvey table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function insertSurvey1($doc){

    watchdog("ajetlsurveys", 'Inside insertSurvey');

    // transform dates
    $createdAt = couchDateTime2Mysql($doc['createdAt']);
    $lastModifiedAt = couchDateTime2Mysql($doc['lastModifiedAt']);
    $fetcha = couchDate2Mysql($doc['Fecha']);


    $query = "INSERT INTO {aj_survey}".
        "(_id, _rev, createdAt, lastModifiedAt,created,uuid,Apellido,Apodo,Año,BarrioComunidad,Calleynumero ,".
        "Casa,Celular,Completado,Direccióndecorreoelectrónico,Día,Fecha,Mes, Municipio,Nombre,".
        "Nombredepersonadecontacto,NombredeusuariodeFacebook,Parentescoopersonarelacionada,".
        "Provincia,Teléfono,provider_id,provider_name,question,user_name)".
        " VALUES (:_id,:_rev,".$createdAt.",".$lastModifiedAt.", NOW(), :uuid, :Apellido, :Apodo, :Ano,:BarrioComunidad, :Calleynumero,".
        ":Casa,:Celular,:Completado,:Direcciondecorreoelectronico,:Dia,".$fetcha.",:Mes, :Municipio,:Nombre,".
        ":Nombredepersonadecontacto,:NombredeusuariodeFacebook, :Parentescoopersonarelacionada,".
        ":Provincia, :Telefono, :provider_id,:provider_name, :question, :user_name)";



    $result = db_query($query,
        array(':_id' => $doc['_id'],
            ':_rev' => $doc['_rev'],
            ':uuid' => $doc['uuid'],
            ':Apellido' => $doc['Apellido'],
            ':Apodo' => $doc['Apodo'],
            ':Ano' => $doc['Año'],
            ':BarrioComunidad' => $doc['BarrioComunidad'],
            ':Calleynumero' => $doc['Calleynumero'],
            ':Casa' => $doc['Casa'],
            ':Celular' => $doc['Celular'],
            ':Completado' => $doc['Completado'],
            ':Direcciondecorreoelectronico' => $doc['Direccióndecorreoelectrónico'],
            ':Dia' => $doc['Día'],
            ':Mes' => $doc['Mes'],
            ':Municipio' => $doc['Municipio'],
            ':Nombre' => $doc['Nombre'],
            ':Nombredepersonadecontacto' => $doc['Nombredepersonadecontacto'],
            ':NombredeusuariodeFacebook' => $doc['NombredeusuariodeFacebook'],
            ':Parentescoopersonarelacionada' => $doc['Parentescoopersonarelacionada'],
            ':Provincia' => $doc['Provincia'],
            ':Telefono' => $doc['Teléfono'],
            ':provider_id' => $doc['provider_id'],
            ':provider_name' => $doc['provider_name'],
            ':question' => $doc['question'],
            ':user_name' => $doc['user_name']
        )
    );


}

/**
 * Query aj_etlsurvey table for record by _id and lastModifiedAt date.
 *
 * @param $_id
 * @param $lastModifiedAt
 * @return null if record does not exist
 *         the record if exist
 */
function getSurveyByIdAndModifiedDate($_id, $lastModifiedAt)
{
    $retRecord = null;

    $sqlLastModifiedAt = couchDateTime2Mysql($lastModifiedAt);

    $result = db_query("SELECT t.id FROM {aj_survey} t WHERE t._id = :_id AND t.lastModifiedAt=".$sqlLastModifiedAt, array(':_id' => $_id));


    if ($result == null) {
        watchdog("ajetlsurveys", 'Result is null');
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        watchdog("ajetlsurveys", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;

}

/**
 * Query aj_etlsurvey table by _id.
 *
 * @param $_id
 * @return null if record not found
 *         the record if found
 */
function getSurveyById($_id)
{
    $retRecord = null;


    $result = db_query('SELECT t.id, t._id, t.lastModifiedAt FROM {aj_survey} t WHERE t._id = :_id', array(':_id' => $_id));

    var_dump($result);

    if ($result == null) {
        watchdog("ajetlsurveys", 'Result is null');
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        watchdog("ajetlsurveys", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;


}


/**
 * Query aj_etlsurvey table by _id and lastModifiedAt DIFFERENT then the input $lastModifiedAt.
 *
 * @param $_id
 * @param $lastModifiedAt
 * @return null if record is not found
 *         the record if found
 */
function getSurveyByIdDifferentDate($_id, $lastModifiedAt)
{
    $retRecord = null;

    //echo "<br>INSIDE getSurveyById";

    watchdog("ajetlsurveys", 'lastmodifiedAt ='.$lastModifiedAt);

    $sqlLastModifiedAt = couchDateTime2Mysql($lastModifiedAt);

    watchdog("ajetlsurveys", 'sqllastmodified ='.$sqlLastModifiedAt);


    $result = db_query("SELECT t.id FROM {aj_survey} t WHERE t._id = :_id AND t.lastModifiedAt<>".$sqlLastModifiedAt, array(':_id' => $_id));



    if ($result == null) {
        watchdog("ajetlsurveys", 'Result is null');
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        watchdog("ajetlsurveys", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;



}

/**
 * First it checks for same _id AND different lastModifiedAt date. If record found
 * deletes the record before inserting the modified document. If record is not found
 * insert the data into the aj_etlsurvey table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function loadSurvey($_id, $lastModifiedAt){

    // check if the record with the same id but different modified date already exist
    $record = getSurveyByIdDifferentDate($_id, $lastModifiedAt);

    // TBD: Maybe need to update the existing document, not delete before inserting. However because
    // of the fast approaching deadline do this for now.

    // record has been changed so delete the old record before inserting
    if ($record != null) {
        watchdog("ajetlsurveys", 'Existing record with different modified date exist');
        db_query("DELETE FROM {aj_survey} WHERE _id='".$_id."'");
    }

    // fetch the document from couch db
    $doc = openDocById($_id);


    // insert the record
    insertSurvey($doc);

}

/**
 * Checks if Fecha is correct.
 *
 * @param $doc
 * @param $id
 * @return bool
 */
function isDocumentValid($doc, $id){

    // Check if Fetcha is valid, there is occasions where Fetcha is 20104-04-26
    $len = strlen($doc['Fecha']);
    if ($len != 10){
        watchdog("ajetlsurveys", 'Fecha is not correct.');
        return false;
    }

    return true;
}




/**
 *
 * Removes the last 6 characters (the timezone) from couchDB date.
 *
 * Example: converts 2013-11-29T09:40:10-03:00 to 2013-11-29T09:40:10 and
 * adds STR_TO_DATE so the final string will be STR_TO_DATE('2013-11-29T09:40:10', '%Y-%m-%dT%H:%i:%S').
 *
 */
function couchDateTime2Mysql($dt){

    // remove the last 6 chars, e.g. the couchDB time zone
    $len = strlen($dt);
    $dt = substr($dt, 0, $len - 6);

    return " STR_TO_DATE('".$dt."', '%Y-%m-%dT%H:%i:%S')";
}


/**
 *

 * Example: converts 23/10/2013 to STR_TO_DATE('23/10/2013', '%d/%m/%Y').
 *
 * Handle different date formats. The input date might be in format:
 * 23-07-2014
 * 2014-07-23
 * 23/04/2014
 *
 */
function couchDate2Mysql($dt){
    if ($dt == null )
        return " null ";

    $pos = stripos($dt, "octubre");

    if ($pos > 0){
        list($dd, $mm, $y) = explode("-", $dt);
        if (strlen($dd) == 1)
            $dd = '0'.$dd;
        if($mm === "octubre")
            $mm = '10';
        $newDt = $dd.'-'.$mm.'-'.$y;
        return " STR_TO_DATE('".$newDt."', '%d-%m-%Y')";
    }


    // date is in dd/mm/YYYY format
    $pos = stripos($dt, "/");

    if ($pos > 0)
        return " STR_TO_DATE('".$dt."', '%d/%m/%Y')";

    $pos = stripos($dt, "-");

    if ($pos > 0) {

        if (strlen($dt) < 8)
            return " null ";

        $pos1 = stripos($dt, "-");
        if ($pos1 === 2) // date is in format 23/05/2014
            return " STR_TO_DATE('" . $dt . "', '%d-%m-%Y')";
        else {

            $first5 = substr($dt, 0, 5);
            $last4 = substr($first5, 1);

            // it means the year has one additional character on front, e.g. 22014, 32014, etc..
            if ($last4 === "2014" || strstr($dt, '20104') || strstr($dt, '20147') || strstr($dt, '20014')){
                $endDt = substr($dt, 5);
                $dt = '2014'.$endDt;
            }else if ($last4 === "2013" || strstr($dt, '20103') || strstr($dt, '20137') || strstr($dt, '20013')){
                $endDt = substr($dt, 5);
                $dt = '2013'.$endDt;
            }


            return " STR_TO_DATE('" . $dt . "', '%Y-%m-%d')";
        }
    }else{
        //assume date is in 14032014 format
        return " STR_TO_DATE('" . $dt . "', '%d%m%Y')";
    }
}

//drupal_schema_fields_sql

