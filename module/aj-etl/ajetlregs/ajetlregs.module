<?php
/**
 * @file
 * A chron module to create custom tables and load data from CouchDb into these tables.
 */

error_reporting(E_ALL);
ini_set("display_errors", 1);

/**
 * Cron job is creating the queue cron job.
 *
 */
function ajetlregs_cron() {

    $queue = DrupalQueue::get('ajetlregs');
    $queue->createItem("arg1");
}

/**
 * Cron jobs info.
 *
 * @return array
 */
function ajetlregs_cron_queue_info()
{

    $queues = array();

    //cron is run at 2:00am
    //if(date('G')==2)
    //{
    $queues['ajetlregs'] = array(
        'worker callback' => 'load_regs_worker',
        'time' => 300, // time in seconds, this is the duration that the job will be CALLED, e.g.
        // after it finish it will be called again until the time is up.
    );
    //}

    return $queues;
}


/**
 * The queue job worker. Query registration from couchDB descending and load them into mySQL database.
 *
 */
function load_regs_worker()
{
    ajetllog_log("ajetlregs", "MESSAGE", "PROCESSING STARTED");
    global $base_url;

    ajetlregs_setModuleVariables();

    $req_url = 'http://localhost:5984/coconut/_design/coconut/_view/resultsByQuestionAndComplete?startkey=%22Participant%20Registration-es%3Atrue%3Az%22&endkey=%22Participant%20Registration-es%3Atrue%22&descending=true&include_docs=false';

    //TBD Uncomment when deploying to prod, the $base_url is not write when deploying on Windows because it has /drupal in the link
    //$req_url = $base_url.':5984/coconut/_design/coconut/_view/resultsByQuestionAndComplete?startkey=%22Participant%20Registration-es%3Atrue%3Az%22&endkey=%22Participant%20Registration-es%3Atrue%22&descending=true&include_docs=false';


    // prepare the request options
    $req_options = array(
        'method' => 'GET',
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    // query couchdb data
    $couch_response = drupal_http_request( $req_url, $req_options );

    // decode to json objects
    $rows = drupal_json_decode( $couch_response->data)['rows'];

    $size = sizeof($rows);

    ajetllog_log("ajetlregs", "MESSAGE", "******Rows fetched:".$size);

    $i = 0;

    foreach ( $rows as $one_row ){
        list($type, $isCompleted, $lastModified1,$lastModified2, $lastModified3, $lastModified4) = explode(":", $one_row['key']);

        // lastModified is in format as 2014-08-11T13:50:41-03:00 so need to re-create
        $lastModified = $lastModified1.':'.$lastModified2.':'.$lastModified3.':'.$lastModified4;

        // check if the record with the same id and last modified date already exist
        $record = ajetlregs_ajetlregs_getRegistrationByIdAndModifiedDate($one_row['id'], $lastModified);

        if ($record != null) {
                ajetllog_log("ajetlregs", "MESSAGE", "Found same exact record and stopped loading registrations for document is".$one_row['id']);
                break;
        }


            ajetlregs_loadRegistration($one_row['id'], $lastModified);
            $i++;

        //if ($i === 10)
          //  break;

    }

    ajetlregs_deleteModuleVariables();

    ajetllog_log("ajetlregs", "MESSAGE", "Document processed".$i);



}



/**
 * Implement hook_enable()
 */
function ajetlregs_enable() {
    //Check if table exists, if not install the schema.
    /* if(db_table_exists('aj_registration') == FALSE) {
         drupal_install_schema('ajetlregs');
     }*/


}


/**
 * Opens the document by Id and returns the JSON object.
 *
 * @param $id
 */
function ajetlregs_OpenRegById($id){
    // TBD: changed hard coded localhost link
    $req_url = 'http://localhost:5984/coconut/'.$id;

    $req_options = array(
        'method' => 'GET',
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    $couch_response = drupal_http_request( $req_url, $req_options );
    $doc = drupal_json_decode( $couch_response->data);


    return $doc;

}

/**
 * Delete module variables.
 */
function ajetlregs_deleteModuleVariables(){
    variable_del("ajRegsColumns");
    
}

/**
 *
 * Use variable_set() to set module global variables.
 *
 *
 */
function ajetlregs_setModuleVariables()
{
    // retrieve aj-survey table columns
    $ajRegsColumns = drupal_schema_fields_sql("aj_registration");
    // set the columns as variable
    variable_set("ajRegsColumns", $ajRegsColumns);
}

/**
 * Generates the first insert query e.g. .(col1, col2, col3...). It's driven by the aj_registration table columns.
 *
 * @param $doc
 *
 */
function ajetlregs_genInsertQueryPart1($doc){
    $query = "";
    $ajRegsColumns = variable_get("ajRegsColumns");



    foreach ($ajRegsColumns as $col){
        if ($col === "id" || $col === "changed")
            continue;

        $query = $query.$col.", ";


    }

    // clean the last ","
    $len = strlen($query);
    $query =substr($query, 0, $len-2);

    return $query;

}


/**
 * Generates the values() insert statement. Returns ERROR if data are invalid.
 *
 * @param $doc
 *
 */
function ajetlregs_genInsertQueryPart2($doc){
    $query = "";
    $key = "";
    $val = "";

    $ajRegsColumns = variable_get("ajRegsColumns");

    foreach ($ajRegsColumns as $col) {
        // skip these
        if ($col === "id" || $col === "changed")
            continue;

        $key = $col;

        if ($key === "createdAt" || $key === "lastModifiedAt") {
            $val = ajetlregs_couchDateTime2Mysql($doc[$key]);
            $query = $query . $val . " ";
        }else if ($key === "created"){
            $val = " NOW() ";
            $query = $query . $val . " ";
        }else if ($key === "Fecha"){
            $val = ajetlregs_couchDate2Mysql($doc[$key]);
            $query = $query . $val . " ";
        }else if ($key === "DOB") {
            $val = ajetlregs_processDOB($doc);
            if ($val === "ERROR")
                return "ERROR";
            $query = $query . $val . " ";
        }else {
            if (array_key_exists($key, $doc)) {
                $val = $doc[$key];
                $pos = stripos($val, "'");
                if ($pos > 0)
                    $val = str_replace("'", "\'", $val);
            }else
                $val = "";
            $query = $query . "'" . $val . "' ";
        }




        $query = $query.",";


    }

    // clean the last ","
    $len = strlen($query);
    $query =substr($query, 0, $len-1);

    return $query;

}

/**
 * Validates the DOB and returns ERROR if date is missing or not valid.
 * It's also log error message and CSV data for providers to fix.
 *
 * @param $doc
 *
 */
function ajetlregs_processDOB($doc){
 // construct DOB from Dia-Mes-Ano
    $yyyy =  $doc['Año'];
    if (strlen($yyyy) != 4) {
        $dataCSV = ajetlregs_constructCSVData($doc);
        ajetllog_error("ajetlregs", "ERROR", "Año de nacimiento está mal.", $dataCSV, $doc['provider_id']);
        return "ERROR";
    }

    $mm = $doc['Mes'];

    // check if month is missing
    // TBD: need to log the error and not insert this document
    if ($mm == null || $mm == ''){
        $dataCSV = ajetlregs_constructCSVData($doc);
        ajetllog_error("ajetlregs", "ERROR", "Mes falta.", $dataCSV, $doc['provider_id']);
        return "ERROR";
    }



    if (!is_numeric($doc['Mes'])) {
        $mm = ajetlregs_month2number($doc['Mes']);
    }

    $mm = (int)$mm;
    // cases where $mm = "9" instead of "09"
    if (strlen($mm) < 2) {
        $mm = "0".$mm;
    }

    $dd = $doc['Día'];
    // check if date is missing
    if ($dd == null || $dd == ''){
        $dataCSV = ajetlregs_constructCSVData($doc);
        ajetllog_error("ajetlregs", "ERROR", "Fecha de falta.", $dataCSV, $doc['provider_id']);
        return "ERROR";
    }

    // convert day to number and check if valid date
    $dd = (int)$dd;


    // check if date is valid
    if (!checkdate((int)$mm, (int)$dd, (int)$doc['Año'])){
        $dataCSV = ajetlregs_constructCSVData($doc);
        ajetllog_error("ajetlregs", "ERROR", "Fecha de nacimiento no es válida - check mes, la fecha o el año", $dataCSV, $doc['provider_id']);
        return "ERROR";
    }

    if (strlen($dd) < 2) {
        $dd = "0".$dd;
    }


    $dob = $dd.'/'.$mm.'/'.$doc['Año'];
    $val = ajetlregs_couchDate2Mysql($dob);

    return $val;
}

/**
 * Constructs data in format UUID, provider_id, Nombre, Apellido, Barrio/Comunidad, Mes, Dia, Ano
 * @param $doc
 *
 */
function ajetlregs_constructCSVData($doc){
    $dataCSV = $doc['uuid'].','.$doc['provider_id'].','.$doc['Nombre'].','.$doc['Apellido'].','
               .$doc['BarrioComunidad'].','.$doc['Mes'].','.$doc['Día'].','.$doc['Año'];
    return $dataCSV;

}

/**
 * Inserts data into aj_etlsurvey table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function ajetlregs_insertRegistration($doc){

    $q1 = ajetlregs_genInsertQueryPart1($doc);
    $q2 = ajetlregs_genInsertQueryPart2($doc);

    // check for error
    if ($q2 === "ERROR")
        return "ERROR";

    $query = "INSERT INTO {aj_registration} (".$q1.") VALUES(".$q2.")";



    try {
        $result = db_query($query);
    }catch(Exception $e){
        ajetllog_error("ajetlregs", "MySQL ERROR", "MySQL error.", $e->getMessage(), "");
    }

}


/**
 * Inserts data into aj_registration table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function ajetlregs_insertRegistrationOld($doc){

    // transform dates
    $createdAt = ajetlregs_couchDateTime2Mysql($doc['createdAt']);
    $lastModifiedAt = ajetlregs_couchDateTime2Mysql($doc['lastModifiedAt']);
    $fetcha = ajetlregs_couchDate2Mysql($doc['Fecha']);


    $query = "INSERT INTO {aj_registration}".
        "(_id, _rev, createdAt, lastModifiedAt,created,uuid,Apellido,Apodo,Año,BarrioComunidad,Calleynumero ,".
        "Casa,Celular,Completado,Direccióndecorreoelectrónico,Día,Fecha,Mes, Municipio,Nombre,".
        "Nombredepersonadecontacto,NombredeusuariodeFacebook,Parentescoopersonarelacionada,".
        "Provincia,Teléfono,provider_id,provider_name,question,user_name)".
        " VALUES (:_id,:_rev,".$createdAt.",".$lastModifiedAt.", NOW(), :uuid, :Apellido, :Apodo, :Ano,:BarrioComunidad, :Calleynumero,".
        ":Casa,:Celular,:Completado,:Direcciondecorreoelectronico,:Dia,".$fetcha.",:Mes, :Municipio,:Nombre,".
        ":Nombredepersonadecontacto,:NombredeusuariodeFacebook, :Parentescoopersonarelacionada,".
        ":Provincia, :Telefono, :provider_id,:provider_name, :question, :user_name)";



    $result = db_query($query,
        array(':_id' => $doc['_id'],
            ':_rev' => $doc['_rev'],
            ':uuid' => $doc['uuid'],
            ':Apellido' => $doc['Apellido'],
            ':Apodo' => $doc['Apodo'],
            ':Ano' => $doc['Año'],
            ':BarrioComunidad' => $doc['BarrioComunidad'],
            ':Calleynumero' => $doc['Calleynumero'],
            ':Casa' => $doc['Casa'],
            ':Celular' => $doc['Celular'],
            ':Completado' => $doc['Completado'],
            ':Direcciondecorreoelectronico' => $doc['Direccióndecorreoelectrónico'],
            ':Dia' => $doc['Día'],
            ':Mes' => $doc['Mes'],
            ':Municipio' => $doc['Municipio'],
            ':Nombre' => $doc['Nombre'],
            ':Nombredepersonadecontacto' => $doc['Nombredepersonadecontacto'],
            ':NombredeusuariodeFacebook' => $doc['NombredeusuariodeFacebook'],
            ':Parentescoopersonarelacionada' => $doc['Parentescoopersonarelacionada'],
            ':Provincia' => $doc['Provincia'],
            ':Telefono' => $doc['Teléfono'],
            ':provider_id' => $doc['provider_id'],
            ':provider_name' => $doc['provider_name'],
            ':question' => $doc['question'],
            ':user_name' => $doc['user_name']
        )
    );


}

/**
 * Query aj_registration table for record by _id and lastModifiedAt date.
 *
 * @param $_id
 * @param $lastModifiedAt
 * @return null if record does not exist
 *         the record if exist
 */
function ajetlregs_ajetlregs_getRegistrationByIdAndModifiedDate($_id, $lastModifiedAt)
{
    $retRecord = null;

    $sqlLastModifiedAt = ajetlregs_couchDateTime2Mysql($lastModifiedAt);

    $result = db_query("SELECT t.id FROM {aj_registration} t WHERE t._id = :_id AND t.lastModifiedAt=".$sqlLastModifiedAt, array(':_id' => $_id));


    if ($result == null) {
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        ajetllog_log("ajetlregs", "MESSAGE", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;

}

/**
 * Query aj_registration table by _id.
 *
 * @param $_id
 * @return null if record not found
 *         the record if found
 */
function ajetlregs_getRegistrationById($_id)
{
    $retRecord = null;


    $result = db_query('SELECT t.id, t._id, t.lastModifiedAt FROM {aj_registration} t WHERE t._id = :_id', array(':_id' => $_id));

    var_dump($result);

    if ($result == null) {
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        ajetllog_log("ajetlregs", "MESSAGE", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;


}


/**
 * Query aj_registration table by _id and lastModifiedAt DIFFERENT then the input $lastModifiedAt.
 *
 * @param $_id
 * @param $lastModifiedAt
 * @return null if record is not found
 *         the record if found
 */
function ajetlregs_getRegistrationByIdDifferentDate($_id, $lastModifiedAt)
{
    $retRecord = null;
    $sqlLastModifiedAt = ajetlregs_couchDateTime2Mysql($lastModifiedAt);
    $result = db_query("SELECT t.id FROM {aj_registration} t WHERE t._id = :_id AND t.lastModifiedAt<>".$sqlLastModifiedAt, array(':_id' => $_id));



    if ($result == null) {
        return null;
    }

    foreach ($result as $record) {
        $retRecord = $record;
        ajetllog_log("ajetlregs", "MESSAGE", 'Found existing doc for doc id='.$record->id);
        break;
    }

    return $retRecord;



}

/**
 * First it checks for same _id AND different lastModifiedAt date. If record found
 * deletes the record before inserting the modified document. If record is not found
 * insert the data into the aj_registration table.
 *
 * @param $id
 * @param $lastModifiedDate
 */
function ajetlregs_loadRegistration($_id, $lastModifiedAt){

    // check if the record with the same id but different modified date already exist
    $record = ajetlregs_getRegistrationByIdDifferentDate($_id, $lastModifiedAt);

    // TBD: Maybe need to update the existing document, not delete before inserting. However because
    // of the fast approaching deadline do this for now.

    // record has been changed so delete the old record before inserting
    if ($record != null) {
        db_query("DELETE FROM {aj_registration} WHERE _id='".$_id."'");
    }

    // fetch the document from couch db
    $doc = ajetlregs_OpenRegById($_id);


    // insert the record
    ajetlregs_insertRegistration($doc);

}

/**
 * Checks if Fecha is correct.
 *
 * @param $doc
 * @param $id
 * @return bool
 */
function ajetlregs_isDocumentValid($doc, $id){

    // Check if Fetcha is valid, there is occasions where Fetcha is 20104-04-26
    $len = strlen($doc['Fecha']);
    if ($len != 10){
        ajetllog_log("ajetlregs", "ERROR", 'Fecha is not correct for doc id='.$id);
        return false;
    }

    return true;
}




/**
 *
 * Removes the last 6 characters (the timezone) from couchDB date.
 *
 * Example: converts 2013-11-29T09:40:10-03:00 to 2013-11-29T09:40:10 and
 * adds STR_TO_DATE so the final string will be STR_TO_DATE('2013-11-29T09:40:10', '%Y-%m-%dT%H:%i:%S').
 *
 */
function ajetlregs_couchDateTime2Mysql($dt){

    // remove the last 6 chars, e.g. the couchDB time zone
    $len = strlen($dt);
    $dt = substr($dt, 0, $len - 6);

    return " STR_TO_DATE('".$dt."', '%Y-%m-%dT%H:%i:%S')";
}


/**
 *

 * Example: converts 23/10/2013 to STR_TO_DATE('23/10/2013', '%d/%m/%Y').
 *
 * Handle different date formats. The input date might be in format:
 * 23-07-2014
 * 2014-07-23
 * 23/04/2014
 *
 */
function ajetlregs_couchDate2Mysql($dt){
    if ($dt == null )
        return " null ";

    $pos = stripos($dt, "octubre");

    if ($pos > 0){
        list($dd, $mm, $y) = explode("-", $dt);
        if (strlen($dd) == 1)
            $dd = '0'.$dd;
        if($mm === "octubre")
            $mm = '10';
        $newDt = $dd.'-'.$mm.'-'.$y;
        return " STR_TO_DATE('".$newDt."', '%d-%m-%Y')";
    }


    // date is in dd/mm/YYYY format
    $pos = stripos($dt, "/");

    if ($pos > 0)
        return " STR_TO_DATE('".$dt."', '%d/%m/%Y')";

    $pos = stripos($dt, "-");

    if ($pos > 0) {

        if (strlen($dt) < 8)
            return " null ";

        $pos1 = stripos($dt, "-");
        if ($pos1 === 2) // date is in format 23/05/2014
            return " STR_TO_DATE('" . $dt . "', '%d-%m-%Y')";
        else {

            $first5 = substr($dt, 0, 5);
            $last4 = substr($first5, 1);

            // it means the year has one additional character on front, e.g. 22014, 32014, etc..
            if ($last4 === "2014" || strstr($dt, '20104') || strstr($dt, '20147') || strstr($dt, '20014')){
                $endDt = substr($dt, 5);
                $dt = '2014'.$endDt;
            }else if ($last4 === "2013" || strstr($dt, '20103') || strstr($dt, '20137') || strstr($dt, '20013')){
                $endDt = substr($dt, 5);
                $dt = '2013'.$endDt;
            }


            return " STR_TO_DATE('" . $dt . "', '%Y-%m-%d')";
        }
    }else{
        //assume date is in 14032014 format
        return " STR_TO_DATE('" . $dt . "', '%d%m%Y')";
    }
}

/**
 * Converts month in Spanish to number. For example febrero will be converted to 02
 * @param m $
 *
 */
function ajetlregs_month2number($m){


    switch ($m) {
        case "enero":
            return "01";
        case "febrero":
            return "02";
        case "marzo":
            return "03";
        case "abril":
            return "04";
        case "mayo":
            return "05";
        case "junio":
            return "06";
        case "julio":
            return "07";
        case "agosto":
            return "08";
        case "septiembre":
            return "09";
        case "octubre":
            return "10";
        case "noviembre":
            return "11";
        case "diciembre":
            return "12";
        default:
            return $m;
    }

}



